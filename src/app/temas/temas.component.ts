import { Component, inject } from '@angular/core';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';
import { Observable } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { AsyncPipe, NgIf } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { OnInit } from '@angular/core';
@Component({
  selector: 'app-temas',
  templateUrl: './temas.component.html',
  styleUrls: ['./temas.component.scss']
})
export class TemasComponent {

ir_Tema(idee: number) {
  this.temaid = idee;
  for (let i = 1; i <= this.cantidadTemas; i++) {
    if (idee == i){
      const element = document.getElementById(i.toString());
      console.log(i)
      if (element) {
          console.log(i+'holi')
          element.scrollIntoView({ behavior: 'smooth' });
        }
    }
  }
}
  
  constructor(private route:ActivatedRoute,private router:Router){}
  id: number =1 ;
  temaid=1;
  sw=false;
  irMaterias() {
    this.router.navigate(['/Materias']);
  }
  irPrincipal() {
    this.router.navigate(['/Principal']);
  }
  irforms(x:number){
    if(x == 1){
      window.location.href ='https://forms.gle/PFfwJHUWjEmWdRvy9';
    }
    if(x == 2){
      window.location.href = 'https://forms.gle/sCqF62d52imhTsKJ7'
    }
    if(x == 3){
      window.location.href = 'https://forms.gle/xmoE5QCyMK3ezSV87'
    }
    if(x == 4){
      window.location.href = 'https://forms.gle/s3pRDufTsLU2JSdS6'
    }
    if(x == 5){
      window.location.href = 'https://forms.gle/efRjvaEbKYRK9EHh8'
    }
    if(x == 6){
      window.location.href = 'https://forms.gle/cinh74gyTuQjZScW9'
    }
  }
  redirectToYoutube(x:number) {
    if(x == 1){
      window.location.href = 'https://www.youtube.com/playlist?list=PLPmRzmMDGerWEzjT0Vqy8D-IixKMY_6N6'
    }
    if(x == 2){
      window.location.href = 'https://www.youtube.com/playlist?list=PLE8uP447fYpis_9iiaT1GrdOLmg85pAJB'
    }
    if(x == 3){
      window.location.href = 'https://www.youtube.com/playlist?list=PLuyqRxNKadzntrdSlwOkLYkP1H3FwDYna'
    }
    if(x == 4){
      window.location.href = 'https://www.youtube.com/playlist?list=PL3v2dgnQ47vzhSdS5oEaGqBnCA-8gADBf'
    }
    if(x == 5){
      window.location.href = 'https://www.youtube.com/playlist?list=PLmGNSxrYSXDLhINoFWHpiPmVTvAK3yQ8o'
    }
    if(x == 6){
      window.location.href = 'https://www.youtube.com/playlist?list=PL34PZAXdQqX5Gh4sIMLPwBpvtNrpARaU8'
    }
  }
  private breakpointObserver = inject(BreakpointObserver);

  cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(
    map(({ matches }) => {
      if (matches) {
        return [
          { title: 'Tema 1 Materia 1', cols: 2, rows: 1 , ideT: '1', contenid:"", subtemas: [{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1' ,img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:'../imagenes/img/14.jpg'}]},
          { title: 'Tema 2 Materia 1', cols: 1, rows: 1 , ideT: '2', contenid:"", subtemas: [{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''}]},
          { title: 'Tema 3 Materia 1', cols: 1, rows: 2 , ideT: '3', contenid:"", subtemas: [{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''}]},
          { title: 'Tema 4 Materia 1', cols: 1, rows: 1 , ideT: '4', contenid:"", subtemas: [{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''}]}
        ];
      }
      return [
        { title: 'Tema 1 Materia 1', cols: 2, rows: 1 , ideT: '1', contenid:"", subtemas: [{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 2',descripcionSubtema:'descripcion subtema1'},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''}]},
        { title: 'Tema 2 Materia 1', cols: 1, rows: 1 , ideT: '2', contenid:"", subtemas: [{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1'},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''}]},
        { title: 'Tema 3 Materia 1', cols: 1, rows: 2 , ideT: '3', contenid:"", subtemas: [{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1'},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''}]},
        { title: 'Tema 4 Materia 1', cols: 1, rows: 1 , ideT: '4', contenid:"", subtemas: [{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1'},{TituloSubtema:'Titulo subtema 1',descripcionSubtema:'descripcion subtema1',img:''}]}
      ];
    })
  );
  cantidadTemas: number = 0;
  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)
    .pipe(
      map(result => result.matches),
      shareReplay()
    );

    ngOnInit(): void{
      
      this.id = +this.route.snapshot.paramMap.get('id')!;
      this.temaid = +this.route.snapshot.paramMap.get('x')!;
      if (this.id == 1){
        this.cantidadTemas= 6;
        this.cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(
          map(({ }) => {
            return [
              { title: 'TEMA 1: HISTORIA DE LA PROGRAMACIÓN', cols: 2, rows: 1 , ideT: '1', contenid:"", 
              subtemas:[{TituloSubtema:'',descripcionSubtema:'Gottfried Wilheml von Leibniz (1646-1716), quien aprendió matemáticas de forma autodidacta (método no aconsejable en programación) construyó una máquina similar a la de Pascal, aunque algo más compleja, podía dividir, multiplicar y resolver raíces cuadradas.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'descriPero quien realmente influyó en el diseño de los primeros computadores fue Charles Babbage (1793-1871). Con la colaboración de la hija de Lord Byron, Lady Ada Countess of Lovelace(1815-1852), a la que debe su nombre el lenguaje ADA creado por el DoD (Departamento de defensa de Estados Unidos) en los años 70. Babbage diseñó y construyó la "máquina diferencial" para el cálculo de polinomios. Más tarde diseñó la "máquina analitica" de propósito general, capaz de resolver cualquier operación matemática. Murió sin poder terminarla, debido al escepticismo de sus patrocinadores y a que la tecnología de la época no era lo suficientemente avanzada. Un equipo del Museo de las Ciencias de Londres, en 1991, consiguió construir la máquina analítica de Babbage, totalmente funcional, siguiendo sus dibujos y especificaciones.pcion',img:'assets/img/materia1-1.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Un hito importante en la historia de la informática fueron las tarjetas perforadas como medio para "alimentar" los computadores. Lady Ada Lovelace propuso la utilización de las tarjetas perforadas en la máquina de Babbage. Para que se enteren todos esos machistas desaprensivos, el primer programador/a fue una mujer. En 1880 el censo en Estados Unidos tardó más de 7 años en realizarse. Es obvio que los datos no eran muy actualizados. Un asistente de la oficina del censo llamado Herman Hollerit (1860-1929) desarrolló un sistema para automatizar la pesada tarea del censo. Mediante tarjetas perforadas y un sistema de circuitos eléctricos, capaz de leer unas 60 tarjetas por minuto realizó el censo de 1890 en 3 años ahorrando tiempo y dinero. Más tarde fundó la Tabulating Machine Company y en 1924 tras alguna que otra fusión nació la Internacional Bussines Machines, IBM. ¿ Os suena ?',img:'assets/img/materia1-2.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Las computadoras de hoy en día se sustentan en la lógica matemática basada en un sistema binario. Dicho sistema se implementa sobre dispositivos electrónicos que permiten, o no, pasar la corriente, con lo que se consiguen los 2 estados binarios: 0 y 1.A mediados del siglo XX, cuando se empezaron a construir las primeras computadoras digitales, se utilizaban tubos de vacío para implementar los 2 estados binarios, pero ¿ cómo aparecieron estos conceptos ? Alan Mathison Turing (1912-1954) diseñó una calculadora universal para resolver cualquier problema, la "máquina de Turing". Tuvo mucha influencia en el desarrollo de la lógica matemática. En 1937 hizo una de sus primeras contribuciones a la lógica matemática y en 1943 plasmó sus ideas en una computadora que utilizaba tubos de vacío. George Boole (1815-1864) también contribuyó al algebra binaria y a los sistemas de circuitos de computadora, de hecho, en su honor fue bautizada el álgebra booleana.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'La primera computadora digital electrónica patentada fue obra de John Vincent Atanasoff (1903-1995). Conocedor de las inventos de Pascal y Babbage, y ayudado por Clifford Berry (1918-1963), construyó el Atanasoff Berry Computer (ABC).El ABC se desarrolló entre 1937 y 1942. Consistía en una calculadora electrónica que utilizaba tubos de vacío y estaba basada en el sistema binario (sistema numérico en el que se combinan los valores verdadero y falso, o 0 y 1)',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Entre 1939 y 1944, Howard Aiken (1900-1973) de la universidad de Harvard en colaboración con IBM desarrolló el Mark 1. Era una computadora electromecánica de 16 metros de largo y más de dos de alto. Tenía 700.000 elementos móviles y varios centenares de kilómetros de cables. Podía realizar las cuatro operaciones básicas y trabajar con información almacenada en forma de tablas.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Por desgracia, los avances tecnológicos suelen producirse gracias a los militares que se aprovechan de la ciencia para perfeccionar sus armas. En la Moore School de la Universidad de Pensilvania se estaba trabajando en un proyecto militar para realizar unas tablas de tiro para armas balísticas. Los cálculos eran enormes y se tardaban semanas en realizarlos. Parece ser que John W. Mauchly (1907-1980), quien dirigía el departamento de física del Ursine College de Filadelfia vivió en casa de Atanasoff durante cuatro días a partir del 13 de Junio de 1941, lo que seguramente aprovechó para conocer las ideas de Atanasoff.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Junto a John Presper Eckert (1919-1995), Mauchly desarrolló una computadora electrónica completamente operacional a gran escala, para acelerar los complicados cálculos del proyecto militar de la universidad Moore. Se terminó en 1946 y se llamó Electronic Numerical Integrator And Computer (ENIAC). El ENIAC tenía 18.000 tubos electrónicos integrados en un volumen de 84 metros cúbicos. Pesaba unas 30 toneladas y consumía alrededor de 100.000 vatios. Su capacidad de cálculo era de 5.000 operaciones por segundo, aunque tenía que programarse manualmente conectándola a 3 tableros que contenían más de 6000 interruptores. Cargar un programa podía ser una tarea de varios días. El calor dispado por semejante monstruo debía ser importante, y se necesitaba una instalación de aire acondicionado. En definitiva, un ordenador portátil... más o menos.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Puede que no os suene, pero quien conozca de "los entresijos de la informática" seguro que considera importante nombrar a Johann Ludwig Von Neumann (1903-1957), genio de las matemáticas, quien tuvo el honor de asistir a las clases de Albert Einstein en la universidad de Berlín. Autor de trabajos de lógica simbólica, matemática pura y aplicada, física y tecnología, publicó un artículo acerca del almacenamiento de los programas, en 1945. Proponía que los programas se guardaran en memoria al igual que los datos, en forma binaria. Esto tuvo como consecuencia el aumento de velocidad de los cálculos y la ausencia de errores producidos por fallos mecánicos al programar la máquina mediante cables.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'En cuanto a la aparición de los lenguajes de programación, el archiconocido COBOL, que tantos problemas causó con el "efecto 2000", fue el primer lenguaje en el que no había que programar directamente en código binario, y fue Grace Murray Hoper en 1952, una oficial de la Marina de Estados Unidos desarrolló el primer compilador, un programa que puede traducir enunciados parecidos al inglés en un código binario comprensible para la maquina llamado COBOL (COmmon Business-Oriented Languaje).',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Recordando a los primeros tiempos del ENIAC, con enormes computadores, en 1998 se terminó el proyecto Blue Pacific. La "maquinita" tiene la nada despreciable cantidad de 5856 procesadores que en conjunto tienen una velocidad de 3.9 teraflops, 2.6 Terabytes de memoria, ocupa 2400 metros cuadrados y tiene un peso de 47 toneladas. Se utiliza para la simulación de explosiones nucleares, y "ha salido" por unos 13000 millones de pesetas... baratito. Hay muchos más personajes que intervienen en la historia y que han realizado grandes aportaciones, pero no es cuestión de extenderse.',img:''}
              ]},
              { title: 'TEMA 2: CONCEPTOS BÁSICOS', cols: 2, rows: 1 , ideT: '2', contenid:"", 
              subtemas:[{TituloSubtema:'¿Qué es la programación?',descripcionSubtema:'Entendemos por programar el proceso a través del cual se emplean una serie de códigos y cifras para introducir algoritmos necesarios para la realización de un proyecto. La acción de programar es desasociable del lenguaje de programación, que es la herramienta que le permite al programador ordenar acciones a un terminal. Vistos los dos aspectos básicos de la programación, vamos a hacer un breve repaso por su historia.',img:'assets/img/materia1-3.jpg'},
                        {TituloSubtema:'¿Qué es un programa?',descripcionSubtema:'Un programa es un conjunto de pasos lógicos escritos en un lenguaje de programación que nos permite realizar una tarea específica. El programa suele contar con una interfaz de usuario, es decir, un medio visual mediante el cual interactuamos con la aplicación. Algunos ejemplos son la calculadora, el navegador de internet, un teclado en pantalla para el celular, etc. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Hoy encontramos programas o aplicaciones que pueden ejecutarse en una computadora, notebooks, tablets y celulares. Estas aplicaciones pueden ser escritas en diferentes lenguajes de programación. Como ejemplos encontramos C, Java, PHP, Python, entre otros. Estos programas corren sobre un sistema operativo, por ejemplo, Windows, Linux, Mac OS y Android entre otros. ',img:'assets/img/materia1-4.jpg'},
                        {TituloSubtema:'¿Qué es un algoritmo informático?',descripcionSubtema:'Un algoritmo informático es un conjunto de instrucciones definidas, ordenadas y acotadas para resolver un problema, realizar un cálculo o desarrollar una tarea. Es decir, un algoritmo es un procedimiento paso a paso para conseguir un fin. A partir de un estado e información iniciales, se siguen una serie de pasos ordenados para llegar a la solución de una situación.  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'En programación, un algoritmo supone el paso previo a ponerse a escribir el código. Primero debemos encontrar la forma de obtener la solución al problema (definir el algoritmo informático), para luego, a través del código, poder indicarle a la máquina qué acciones queremos que lleve a cabo. De este modo, un programa informático no sería más que un conjunto de algoritmos ordenados y codificados en un lenguaje de programación para poder ser ejecutados en un ordenador. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'No obstante, los algoritmos no son algo exclusivo de los ámbitos de las matemáticas, la lógica y la computación. Utilizamos numerosos algoritmos para resolver problemas en nuestra vida cotidiana. Algunos de los ejemplos más habituales son los manuales de instrucciones o las recetas de cocina. ',img:'assets/img/materia1-5.jpg'},
              ]},
              { title: 'TEMA 3: ALGORITMOS', cols: 2, rows: 1 , ideT: '3', contenid:"La palabra «algoritmo» es un concepto comúnmente relacionado con el ámbito de la informática y está cada vez más presente en nuestro día a día. En este post, explicamos qué es un algoritmo informático y analizamos sus características, diseccionamos los principales tipos de algoritmos que existen y compartimos un ejemplo real de algoritmo.", 
              subtemas:[{TituloSubtema:'Partes de un algoritmo informático',descripcionSubtema:'Las tres partes de un algoritmo son: ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Input (entrada). Información que damos al algoritmo con la que va a trabajar para ofrecer la solución esperada. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Input (entrada). Información que damos al algoritmo con la que va a trabajar para ofrecer la solución esperada. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Output (salida). Resultados, a partir de la transformación de los valores de entrada durante el proceso. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'De este modo, un algoritmo informático parte de un estado inicial y de unos valores de entrada, sigue una serie de pasos sucesivos y llega a un estado final en el que ha obtenido una solución. ',img:'assets/img/materia1-6.jpg'},
                        {TituloSubtema:'Características de los algoritmos',descripcionSubtema:'Asimismo, los algoritmos presentan una serie de características comunes. Son: ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Precisos. Objetivos, sin ambigüedad.  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Ordenados. Presentan una secuencia clara y precisa para poder llegar a la solución. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Finitos. Contienen un número determinado de pasos. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Concretos. Ofrecen una solución determinada para la situación o problema planteados. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'descripcion ',img:'assets/img/materia1-7.jpg'},
                        {TituloSubtema:'Tipos de algoritmos ',descripcionSubtema:'Existen diversas clasificaciones de algoritmos, en función de diferentes criterios. Según su sistema de signos (cómo describen los pasos a seguir), se distingue entre algoritmos cuantitativos y cualitativos, si lo hacen a través de cálculos matemáticos o secuencias lógicas. Asimismo, si requieren o no el empleo de un ordenador para su resolución, se clasifican en computacionales y no computacionales. Pero, si nos fijamos en su función (qué hace) y su estrategia para llegar a la solución (cómo lo hace), encontramos muchos más tipos de algoritmos. Destacamos los siguientes cinco tipos de algoritmos informáticos:  ',img:'assets/img/materia1-8.jpg'},
                        {TituloSubtema:'Algoritmos de búsqueda',descripcionSubtema:'Los algoritmos de búsqueda localizan uno o varios elementos que presenten una serie de propiedades dentro de una estructura de datos. ',img:''},
                        {TituloSubtema:'Ejemplos de algoritmos de búsqueda',descripcionSubtema:'•	Búsqueda secuencial. En la que se compara el elemento a localizar con cada elemento del conjunto hasta encontrarlo o hasta que hayamos comparado todos. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Búsqueda binaria. En un conjunto de elementos ordenados, hace una comparación con el elemento ubicado en el medio y, si no son iguales, continúa la búsqueda en la mitad donde puede estar. Y así sucesivamente en intervalos cada vez más pequeños de elementos. ',img:''},
                        {TituloSubtema:'Algoritmos de ordenamiento',descripcionSubtema:'Reorganizan los elementos de un listado según una relación de orden. Las más habituales son el orden numérico y el orden lexicográfico. Un orden eficiente optimiza el uso de algoritmos como los de búsqueda y facilitan la consecución de resultados legibles por personas y no solo máquinas. ',img:''},
                        {TituloSubtema:'Ejemplos de algoritmos de ordenamiento',descripcionSubtema:'•	Ordenamiento de burbuja. Compara cada elemento de la lista a ordenar con el siguiente e intercambia su posición si no están en el orden adecuado. Se revisa varias veces toda la lista hasta que no se necesiten más intercambios. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Ordenamiento por selección. Vamos colocando el elemento más pequeño disponible en cada una de las posiciones de la lista de forma consecutiva. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Ordenamiento rápido. Elegimos un elemento del conjunto (pivote) y reubicamos el resto a cada uno de sus lados, en función de si son mayores o menores que el elemento que estamos tomando como referencia. Repetimos el procedimiento en cada subconjunto. ',img:''},
              ]},
              { title: 'TEMA 4:  REPRESENTACION DE UN ALGORITMO', cols: 2, rows: 1 , ideT: '4', contenid:"", 
              subtemas:[{TituloSubtema:'',descripcionSubtema:'El lenguaje natural es popular, pues se nos da naturalmente y puede comunicar los pasos de un algoritmo a una audiencia general. Cuando desarrollamos algoritmos, a menudo trabajamos con personas que saben programación y con algunos que no; pero todos conocen el lenguaje natural. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Sin embargo, el lenguaje natural tiene inconvenientes. Tiende a ser ambiguo y a estar definido vagamente, pues carece de estructura precisa. Esto dificulta que otros sigan un algoritmo y se sientan seguros de que es correcto. Los diagramas de flujo y el pseudocódigo son formatos más estructurados que pueden expresar un algoritmo de manera más precisa, y son populares con científicos de computación y programadores. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Intentemos los formatos más estructurados para expresar el algoritmo del idioma ficticio en el artículo anterior. ',img:''},
                        {TituloSubtema:'Diagramas de flujo',descripcionSubtema:'Una manera más formal de expresar un algoritmo es con un diagrama de flujo, un diagrama con cajas conectadas por flechas. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Para empezar con algo sencillo, aquí hay un diagrama de flujo para la versión básica del algoritmo del idioma ficticio: ',img:'assets/img/materia1-8.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Cada rectángulo representa un paso en la secuencia, y las flechas fluyen de un paso al siguiente. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'',img:''},
                        {TituloSubtema:'Pseudocódigo',descripcionSubtema:'Finalmente la mayoría de los algoritmos se transforman en código para ejecutar en una computadora. Antes de eso, los programadores a menudo prefieren expresar un algoritmo en pseudocódigo: un código que utiliza construcciones de un lenguaje de programación, pero que en realidad, no se ejecuta. ',img:'assets/img/materia1-9.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Cada programador escribe pseudocódigo de manera diferente, pues no hay un estándar oficial, así que puedes toparte con pseudo-código que se vea muy diferente.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Expresar un algoritmo en pseudocódigo ayuda a un programador a pensar en términos familiares, sin preocuparse por la sintaxis y detalles específicos. También le provee a los científicos de computación una forma independiente del lenguaje para expresar un algoritmo, de manera que los programadores de cualquier lenguaje puedan tomarla, leer el pseudo-código y traducirlo a su lenguaje favorito. ',img:''},
                        {TituloSubtema:'Lenguajes de programación',descripcionSubtema:'Después de planear nuestro algoritmo, ya sea en lenguaje natural, diagramas de flujo, pseudocódigo, o una combinación de esos, es momento de convertirlo en código ejecutable. ',img:'assets/img/materia1-10.jpg'},
              
              ]},
              { title: 'TEMA 5: VARIABLES Y CONSTANTES', cols: 2, rows: 1 , ideT: '5', contenid:"Podemos expresar un algoritmo de muchas maneras, incluyendo lenguaje natural, diagramas de flujo, pseudocódigo y, por supuesto, en lenguajes de programación reales.", 
              subtemas:[{TituloSubtema:'¿Qué son las variables y constantes?',descripcionSubtema:'Existen dos elementos fundamentales en la programación a los cuales se les asignan valores que luego serán utilizados en el programa en el cual se desarrollan, estos son las variables y las constantes. ',img:''},
                        {TituloSubtema:'Variables',descripcionSubtema:'Los programadores lo tenemos difícil con algunas palabras técnicas. Python, java, desarrollo, ¿qué significan? Por eso el post de hoy lo dedicamos a explicarte qué es una variable en programación. Una de las palabras que más nos habíais pedido que os tradujéramos.   ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Nos encanta explicarte estos términos para que puedas introducirte en el mundo del desarrollo de la mejor manera. Así que coge papel y boli y prepárate para apuntarlo todo, ¡la lección de hoy es más que interesante!  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Una variable es donde se almacenan y se recuperan los datos de un programa. Así de simple. En programación, la utilizamos para guardar datos y estados, asignar ciertos valores de variables a otras, representar valores de expresiones matemáticas y mostrar valores por pantallas.   ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Las variables se expresan así:  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Como un número  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Como un texto  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Como un dato abstracto  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Como un objeto  ',img:''},
                        {TituloSubtema:'Cómo nombramos las variables',descripcionSubtema:'Lo primero que tienes que saber es que las variables se identifican. Tienen un identificador, que no es otra cosa que la forma en que las nombramos. Y hay que respetar una serie de restricciones o condiciones previas. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Aquí van los límites:  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	No utilices espacios.  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	No empieces con un número.  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	No utilices una palabra reservada. (if, while…)  ',img:''},
                        {TituloSubtema:'Cómo declarar una variable ',descripcionSubtema:'Muchos lenguajes de programación, por no decir la mayoría, obligan a declarar una variable. Esto significa que te obligan a explicar cómo se llamará la variable, declararla con los tipos de datos asociados.   ',img:''},
                        {TituloSubtema:'Ejemplos en programación ',descripcionSubtema:'Ahora lo que necesitas es entender algunos ejemplos. Te explicamos aquí qué tipos de variables podemos usar cuando estamos programando con lenguajes.  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Variable auxiliar: las conocidas como variables temporales, las que necesitamos para ejecutar algo de forma temporal. O, en otras palabras, las variables que no necesitas cuando cumples el objetivo en programación.  ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Variable de estado: como su propio nombre indica, se utilizan para conocer el estado de un objeto en cada momento de la programación. Pueden ser variables booleanas, con valor de verdadero o falso.   ',img:'assets/img/materia1-11.jpg'},
                        {TituloSubtema:'Constantes',descripcionSubtema:'Una constante es un valor que se establece en una sección del código y permanece constante durante la ejecución del programa. A diferencia de las variables, las constantes no cambian de valor mientras el programa está en funcionamiento. Las constantes se utilizan para asegurar que un valor crítico permanezca inalterable y no pueda ser modificado accidentalmente o intencionalmente. En programación dato que no cambia su valor. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Básicamente las constantes son un valor fijo que no cambia durante la ejecución del programa. Las constantes son utilizadas en programas para evitar errores, asegurando que ciertas variables y valores permanezcan inalterables. ',img:''},
                        {TituloSubtema:'¿Cómo se utiliza la constante?',descripcionSubtema:'Normalmente lo que que se hace es definir el valor de esa constante y se le da un valor por ejemplo: ',img:'assets/img/materia1-12.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Como regla, se suele usar, que la constante se define con una palabra en mayúsculas. Una vez tienes definida esta constante lo ideal que es a medida que escribes el código del programa, el texto o la hoja de cálculo, no escribas el valor de la constante, sino que pongas el NOMBRE con el que has definido la constante. ',img:''},
                        {TituloSubtema:'Ventajas de usar constantes',descripcionSubtema:'•	Ayudan a hacer el código más legible: Al utilizar constantes, se puede hacer el código más legible y fácil de entender. Por ejemplo, en lugar de utilizar el valor 3.14159 directamente en el código, se puede utilizar una constante llamada PI. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Evitan errores: Al utilizar constantes, se puede evitar el error de escribir un valor incorrecto en el código. Por ejemplo, si se utiliza una constante llamada NUMERO_MAXIMO, se puede estar seguro de que el valor no cambiará accidentalmente. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Facilitan el mantenimiento del código: Si se utiliza una constante, y se necesita cambiar el valor, solo se tiene que cambiar en un lugar. Por ejemplo, si se utiliza una constante llamada TAMANO_MAXIMO y se necesita cambiar el valor de 100 a 200, solo se tiene que cambiar el valor de la constante en lugar de buscar en todo el código donde se ha utilizado el valor. ',img:''},
              ]},
              { title: 'TEMA 6: ESTRUCTURAS DE CONTROL', cols: 2, rows: 1 , ideT: '6', contenid:"Como mencionamos anteriormente, un algoritmo está compuesto por una sucesión ordenada de comandos que se ejecutan uno detrás de otro. Sin embargo, con frecuencia es necesario recurrir a comandos especiales que alteran o controlan el orden en el que se ejecutan las acciones. Llamamos estructuras de control del flujo de las acciones al conjunto de reglas que permiten controlar el flujo de las acciones de un algoritmo o programa. Las mismas pueden clasificarse en secuenciales, condicionales e iterativas.", 
              subtemas:[{TituloSubtema:'Estructuras de control secuenciales',descripcionSubtema:'En algunas partes de un algoritmo puede ser útil detenerse a hacer una pregunta porque se llegó a una situación en la que puede haber una o más opciones disponibles para continuar. Dependiendo de la respuesta a la pregunta, que siempre deberá ser VERDADERO (TRUE) o FALSO (FALSE), el algoritmo seguirá ciertas acciones e ignorará otras. Estas preguntas y respuestas representan procesos de toma de decisión que conducen a diferentes caminos dentro del algoritmo, permitiéndonos que la solución para el problema en cuestión sea flexible y se adapte a distintas situaciones. Este tipo de estructuras de control de las acciones reciben el nombre de condicionales (o estructuras de selección) y pueden ser simples, dobles y múltiples. ',img:''},
                        {TituloSubtema:'Estructuras condicionales simples',descripcionSubtema:'Postulan una evaluación lógica y, si su resultado es VERDADERO, se procede a ejecutar las acciones encerradas por esta estructura. Se describen en pseudocódigo con la siguiente sintaxis: ',img:'assets/img/materia1-13.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'La palabra SI indica el comando de evaluación lógica, <condición> indica la condición a evaluar y Acción/es son las instrucciones que se realizarán sólo si se cumple la condición, es decir, si la evaluación resulta en VERDADERO. Si la condición no se verifica, no se ejecuta ninguna acción y el algoritmo sigue su estructura secuencial a continuación del FIN SI. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Por ejemplo, el siguiente algoritmo registra la edad de una persona y, en el caso de que sea mayor de edad, avisa que puede votar en las elecciones provinciales de Santa Fe: ',img:'assets/img/materia1-14.jpg'},
                        {TituloSubtema:'Estructuras condicionales dobles',descripcionSubtema:'Este tipo de estructura añade una acción a ejecutarse en el caso de que la condición evaluada no se verifique (es decir, devuelve el valor FALSO). La sintaxis es: ',img:'assets/img/materia1-15.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'La palabra ENTONCES antecede a las acciones que se realizan si se cumple la condición y la expresión SI NO a las que se realizan si no se verifica la misma. ',img:'assets/img/materia1-16.jpg'},
                        {TituloSubtema:'Estructuras condicionales múltiples o anidadas',descripcionSubtema:'Permiten combinar varias estructuras condicionales para establecer controles más complejos sobre el flujo de las acciones, representando una toma de decisión múltiple. Podemos ejemplificar la sintaxis de la siguiente forma: ',img:'assets/img/materia1-17.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'En la estructura anterior, hay una primera evaluación lógica en la cual si el resultado es VERDADERO, se ejecuta la Acción 1 y nada más. En cambio, si su resultado es FALSO, se procede a realizar una segunda evaluación lógica, que da lugar a la ejecución de la Acción 2 o de la Acción 3 si su resultado es VERDADERO o FALSO, respectivamente. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'El último bloque de acciones (...Acción 3...) se evaluará si ninguna de las condiciones lógicas anteriores fue VERDADERO. En el ejemplo de la edad:  ',img:'assets/img/materia1-18.jpg'},
                        {TituloSubtema:'Estructuras de control iterativas',descripcionSubtema:'Las estructuras de control iterativas son útiles cuando la solución de un problema requiere que se ejecute repetidamente un determinado conjunto de acciones. El número de veces que se debe repetir dicha secuencia de acciones puede ser fijo o puede variar dependiendo de algún dato o condición a evaluar en el algoritmo. ',img:''},
                        {TituloSubtema:'Estructuras de control iterativas con un número fijo de iteraciones',descripcionSubtema:'Se aplican cuando se conoce de antemano el número exacto de veces que se debe repetir una secuencia de acciones. También se conocen como bucles (loops) controlados por un conteo, ya que el algoritmo va contando la cantidad de repeticiones haciendo uso de una variable que recibe el nombre de variable de iteración, índice o conteo. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Por ejemplo, imaginemos que queremos escribir un algoritmo que permita calcular la quinta potencia de cualquier número. Para esto, se debe tomar dicho número y multiplicarlo por sí mismo 5 veces. Por lo tanto, una posible solución es: ',img:'assets/img/materia1-19.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Ya que sabemos que la multiplicación se debe repetir 5 veces, podemos resumir lo anterior con la siguiente estructura: ',img:'assets/img/materia1-20.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'La letra i es la variable de iteración. Podríamos haber elegido otra letra u otra palabra en su lugar, pero emplear i es una elección bastante común. En este ejemplo, su única función es ir contando la cantidad de veces que se repiten las acciones encerradas dentro de la estructura PARA/FIN PARA. El bloque de instrucciones se repite tantas veces como i tarde en llegar a 5 partiendo desde 1. Por convención, a la variable de iteración no la declaramos junto con las otras variables numéricas (como x y resultado). ',img:''},
                        {TituloSubtema:'Estructuras de control iterativas con un número indeterminado de iteraciones',descripcionSubtema:'En otras circunstancias se puede necesitar repetir un bloque de acciones sin conocer con exactitud cuántas veces, si no que esto depende de algún otro aspecto del algoritmo. Las iteraciones pueden continuar mientras que o hasta que se verifique alguna condición, dando lugar a dos tipos de estructuras. Estos casos también se conocen como bucles (loops) controlados por una condición. ',img:''},
                        {TituloSubtema:'Mientras que',descripcionSubtema:'El conjunto de sentencias se repite mientras que se siga evaluando como VERDADERO una condición declarada al inicio del bloque. Cuando la condición ya no se cumple, el proceso deja de ejecutarse. La sintaxis es: ',img:'assets/img/materia1-21.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Veamos un ejemplo: ',img:'assets/img/materia1-22.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'descripcion ',img:'assets/img/materia1-23.jpg'},
              ]},
            ];
          })
        );
        this.temas =[
          {titulo: '1: HISTORIA DE LA PROGRAMACIÓN', id: 1},
          {titulo: '2: CONCEPTOS BÁSICOS', id: 2},
          {titulo: '3: ALGORITMOS', id: 3},
          {titulo: '4: REPRESENTACION DE UN ALGORITMO', id: 4},
          {titulo: '5: VARIABLES Y CONSTANTES', id: 5},
          {titulo: '6: ESTRUCTURAS DE CONTROL', id: 6}
        ]
      }
      if (this.id == 2){
        this.cantidadTemas= 3;
        this.cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(
          map(({ }) => {
            return [
              { title: 'Tema 1: Linux', cols: 2, rows: 1 , ideT: '1', contenid:"", 
              subtemas:[{TituloSubtema:'¿Qué es Linux?',descripcionSubtema:'Linux® es un sistema operativo (SO) open source. En 1991, Linus Torvalds lo diseñó y creó a modo de pasatiempo. Mientras estaba en la universidad, intentó crear una versión open source, alternativa y gratuita del sistema operativo MINIX, que a su vez se basaba en los principios y el diseño de Unix. Ese pasatiempo logró convertirse en el SO con la mayor base de usuarios, el más usado en los servidores de Internet disponibles públicamente y en el único utilizado en las 500 supercomputadoras más rápidas.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Quizá lo mejor de Linux es que es open source. Linux se lanzó en virtud de la Licencia Pública General de GNU (GPL), así que cualquier persona puede ejecutar el software, estudiarlo, compartirlo y modificarlo. El código modificado también se puede redistribuir e incluso vender, pero todo esto se debe hacer con la misma licencia. Esta es una de las principales diferencias con los sistemas operativos tradicionales (por ejemplo, Unix y Windows), los cuales son propietarios, están bloqueados, se distribuyen tal como están y no se pueden modificar.',img:'assets/img/Materia2-img1.jpg'},
                        {TituloSubtema:'Ventajas de Linux',descripcionSubtema:'Linux sirve como base para casi cualquier tipo de iniciativa de TI, lo cual incluye los contenedores, las aplicaciones desarrolladas en la nube y la seguridad. Es un elemento esencial de algunos de los sectores y las empresas más grandes del mundo, desde los sitios web para compartir información (como Wikipedia y New York Stock Exchange) hasta los dispositivos móviles que utilizan Android (una distribución del kernel de Linux para un uso en particular con un software complementario). Con el pasar de los años, Linux se convirtió en el estándar preferido para ejecutar las cargas de trabajo altamente disponibles, confiables e importantes en las implementaciones de la nube y los centros de datos. Tiene una gran cantidad de casos prácticos, funciones, distribuciones, dispositivos y sistemas de destino, y se basa en las necesidades y las cargas de trabajo del usuario.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Microsoft ha adoptado Linux y el open source de otras maneras. Por ejemplo, creó un SQL Server para Linux y puso su marco .NET (.NET Core/Mono) a disposición de todos, de modo que cualquier plataforma pueda ejecutarlo y que los desarrolladores que usan Linux puedan crear aplicaciones a partir de él. Para el año 2027, todos los clientes de SAP migrarán a SAP HANA, un sistema de gestión de bases de datos relacionales en memoria que solo se ejecuta en Linux. Desde 2017, el 50 % del mercado de SAP son clientes de Windows.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'En cuanto a la nube, incluso en Azure de Microsoft, más del 60 % de las imágenes de Azure Marketplace y casi un tercio de las máquinas virtuales se basan en Linux. Por otro lado, Amazon Web Services, IBM Cloud y Google Cloud Platform ofrecen varias distribuciones de Linux en sus imágenes disponibles al público. Linux continúa siendo el SO del futuro, y cada vez son más los sistemas que dependen de su estabilidad y capacidad de ampliación.',img:''},
                        {TituloSubtema:'¿Qué es un comando Linux?',descripcionSubtema:'Un comando Linux es un programa o utilidad que se ejecuta en la CLI, una consola que interactúa con el sistema a través de textos y procesos. Es similar a la aplicación Símbolo del Sistema en Windows. Los comandos de Linux se ejecutan en el Terminal pulsando Enter al final de la línea. Puedes ejecutar comandos para realizar diversas tareas, desde la instalación de paquetes hasta la gestión de usuarios y la manipulación de archivos.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'La sintaxis general de un comando Linux es la siguiente: Nombredelcomando [opcion(es)] [parametro(s)]. Los comandos Linux pueden contener una opción o un parámetro. En algunos casos, pueden ejecutarse sin ellos. Estas son las tres partes más comunes de un comando:',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	CommandName es la regla que deseas ejecutar.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Option o flag modifica el funcionamiento de un comando. Para ejecutarla, utiliza guiones (-) o guiones dobles (—).',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Parameter o argument especifica cualquier información necesaria para el comando.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Ten en cuenta que todos los comandos de Linux distinguen entre mayúsculas y minúsculas.',img:''},
                        {TituloSubtema:'Aquí la lista de comandos básicos de Linux:',descripcionSubtema:'descripcion subtema1',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando sudo. Abreviatura de superusuario do, sudo es uno de los comandos básicos más populares de Linux que te permite realizar tareas que requieren permisos administrativos o de root.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando pwd. Utiliza el comando pwd para encontrar la ruta de tu directorio de trabajo actual. Simplemente introduciendo pwd te devolverá la ruta actual completa, una ruta de todos los directorios que comienza con una barra oblicua (/). Por ejemplo, /inicio/nombredeusuario.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando cd. Para navegar por los archivos y directorios de Linux, usa el comando cd. Te pedirá la ruta completa o el nombre del directorio, dependiendo del directorio de trabajo actual en el que te encuentres.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando ls. El comando ls se usa para ver el contenido de un directorio. Por defecto, este comando mostrará el contenido de tu directorio de trabajo actual.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando cat. cat (abreviatura de concatenate, en inglés) es uno de los comandos más utilizados en Linux. Este lista, combina y escribe el contenido de los archivos en la salida estándar. Para ejecutar este comando, escribe cat seguido del nombre del archivo y su extensión. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando cp. Utiliza el comando cp para copiar archivos o directorios y su contenido. Echa un vistazo a los siguientes casos de uso. Para copiar un archivo del directorio actual a otro, introduce cp seguido del nombre del archivo y del directorio de destino. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando mv.  El uso principal del comando mv es mover archivos, aunque también se puede usar para cambiar el nombre de los archivos. Además, no produce ninguna salida al ejecutarlo. Simplemente escribe mv seguido del nombre del archivo y el directorio de destino. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando mkdir. Utiliza el comando mkdir para crear uno o varios directorios a la vez y establecer los permisos para cada uno de ellos. El usuario que ejecuta este comando debe tener el privilegio de crear una nueva carpeta en el directorio principal o puede recibir un error de permiso denegado.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando rmdir. Para eliminar permanentemente un directorio vacío, utiliza el comando rmdir. Recuerda que el usuario que ejecuta este comando debe tener privilegios sudo en el directorio padre.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando rm. El comando rm se utiliza para borrar archivos dentro de un directorio. Asegúrate de que el usuario que ejecuta este comando tiene permisos de escritura. Recuerda la ubicación del directorio ya que esto eliminará el/los archivo(s) y no podrás deshacerlo.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comando touch.  El comando touch permite crear un archivo vacío o generar y modificar una marca de tiempo en la línea de comandos de Linux. ',img:''}
                      ]},
              { title: 'Tema 2: HTML +CSS', cols: 2, rows: 1 , ideT: '2', contenid:"", 
              subtemas:[{TituloSubtema:'HTML: Lenguaje de etiquetas de hipertexto',descripcionSubtema:'HTML (Lenguaje de Marcas de Hipertexto, del inglés HyperText Markup Language) es el componente más básico de la Web. Define el significado y la estructura del contenido web. Además de HTML, generalmente se utilizan otras tecnologías para describir la apariencia/presentación de una página web (CSS) o la funcionalidad/comportamiento (JavaScript). ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'"Hipertexto" hace referencia a los enlaces que conectan páginas web entre sí, ya sea dentro de un único sitio web o entre sitios web. Los enlaces son un aspecto fundamental de la Web. Al subir contenido a Internet y vincularlo a las páginas creadas por otras personas, te conviertes en un participante activo en la «World Wide Web» (Red Informática Mundial).',img:''},
                        {TituloSubtema:'',descripcionSubtema:'HTML utiliza "marcas" para etiquetar texto, imágenes y otro contenido para mostrarlo en un navegador Web. Las marcas HTML incluyen "elementos" especiales como <head>, <title>, <body>, <header>, <footer>, <article>, <section>, <p>, <div>, <span>, <img>, <aside>, <audio>, <canvas>, <datalist>, <details>, <embed>, <nav>, <output> (en-US), <progress>, <video>, <ul>, <ol>, <li> y muchos otros.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Un elemento HTML se distingue de otro texto en un documento mediante "etiquetas", que consisten en el nombre del elemento rodeado por "<" y ">". El nombre de un elemento dentro de una etiqueta no distingue entre mayúsculas y minúsculas. Es decir, se puede escribir en mayúsculas, minúsculas o una mezcla. Por ejemplo, la etiqueta <title> se puede escribir como <Title>, <TITLE> o de cualquier otra forma.',img:''},
                        {TituloSubtema:'¿qué es HTML en realidad?',descripcionSubtema:'HTML no es un lenguaje de programación; es un lenguaje de marcado que define la estructura de tu contenido. HTML consiste en una serie de elementos que usarás para encerrar diferentes partes del contenido para que se vean o comporten de una determinada manera. Las etiquetas de encierre pueden hacer de una palabra o una imagen un hipervínculo a otro sitio, se pueden cambiar palabras a cursiva, agrandar o achicar la letra, etc. Por ejemplo, toma la siguiente línea de contenido:',img:'assets/img/Materia2-img2.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Si quieres especificar que se trata de un párrafo, podrías encerrar el texto con la etiqueta de párrafo (<p>):',img:'assets/img/Materia2-img3.jpg'},
                        {TituloSubtema:'Anatomía de un elemento HTML',descripcionSubtema:'Explora este párrafo en mayor profundidad.',img:'assets/img/Materia2-img4.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Las partes principales del elemento son:',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	La etiqueta de apertura: consiste en el nombre del elemento (en este caso, p), encerrado por paréntesis angulares (< >) de apertura y cierre. Establece dónde comienza o empieza a tener efecto el elemento —en este caso, dónde es el comienzo del párrafo—.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	La etiqueta de cierre: es igual que la etiqueta de apertura, excepto que incluye una barra de cierre (/) antes del nombre de la etiqueta. Establece dónde termina el elemento —en este caso dónde termina el párrafo—.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	El contenido: este es el contenido del elemento, que en este caso es sólo texto.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	El elemento: la etiqueta de apertura, más la etiqueta de cierre, más el contenido equivale al elemento.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Los elementos pueden también tener atributos, que se ven así: ',img:'assets/img/Materia2-img5.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Los atributos contienen información adicional acerca del elemento, la cual no quieres que aparezca en el contenido real del elemento. Aquí class es el nombre del atributo y editor-note el valor del atributo. En este caso, el atributo class permite darle al elemento un nombre identificativo, que se puede utilizar luego para apuntarle al elemento información de estilo y demás cosas.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Un atributo debe tener siempre:',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Un espacio entre este y el nombre del elemento (o del atributo previo, si el elemento ya posee uno o más atributos).',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	El nombre del atributo, seguido por un signo de igual (=).',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Comillas de apertura y de cierre, encerrando el valor del atributo.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Los atributos siempre se incluyen en la etiqueta de apertura de un elemento, nunca en la de cierre.',img:''}
                      ]},
              { title: 'Tema 3: JAVA SCRIPT', cols: 2, rows: 1 , ideT: '3', contenid:"", 
              subtemas:[{TituloSubtema:'Fundamentos de JavaScript',descripcionSubtema:'JavaScript es el lenguaje de programación que debes usar para añadir características interactivas a tu sitio web, (por ejemplo, juegos, eventos que ocurren cuando los botones son presionados o los datos son introducidos en los formularios, efectos de estilo dinámicos, animación, y mucho más). Este artículo te ayudará a comenzar con este lenguaje extraordinario y te dará una idea de qué es posible hacer con él.',img:''},
                        {TituloSubtema:'¿Qué es JavaScript realmente?',descripcionSubtema:'JavaScript es un robusto lenguaje de programación que se puede aplicar a un documento HTML y usarse para crear interactividad dinámica en los sitios web. Fue inventado por Brendan Eich, cofundador del proyecto Mozilla, Mozilla Foundation y la Corporación Mozilla.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Puedes hacer casi cualquier cosa con JavaScript. Puedes empezar con pequeñas cosas como carruseles, galerías de imágenes, diseños fluctuantes, y respuestas a las pulsaciones de botones. Con más experiencia, serás capaz de crear juegos, animaciones 2D y gráficos 3D, aplicaciones integradas basadas en bases de datos ¡y mucho más!',img:''},
                        {TituloSubtema:'',descripcionSubtema:'JavaScript por sí solo es bastante compacto aunque muy flexible, y los desarrolladores han escrito gran cantidad de herramientas encima del núcleo del lenguaje JavaScript, desbloqueando una gran cantidad de funcionalidad adicional con un mínimo esfuerzo. Esto incluye',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Interfaces de Programación de Aplicaciones del Navegador (APIs) — APIs construidas dentro de los navegadores que ofrecen funcionalidades como crear dinámicamente contenido HTML y establecer estilos CSS, hasta capturar y manipular un vídeo desde la cámara web del usuario, o generar gráficos 3D y muestras de sonido.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	APIs de terceros, que permiten a los desarrolladores incorporar funcionalidades en sus sitios de otros proveedores de contenidos como Twitter o Facebook.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Marcos de trabajo y librerías de terceros que puedes aplicar a tu HTML para que puedas construir y publicar rápidamente sitios y aplicaciones.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Ya que se supone que este artículo es solo una introducción ligera a JavaScript, la intención no es confundirte en esta etapa hablando en detalle sobre cuál es la diferencia entre el núcleo del lenguaje JavaScript y las diferentes herramientas listadas arriba. Puedes aprender todo eso en detalle más tarde, en el Área de Aprendizaje en MDN, y en el resto de MDN.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Debajo se presentan algunos aspectos del núcleo del lenguaje y también jugarás con unas pocas características de la API del navegador. ¡Diviértete!',img:''},
                        {TituloSubtema:'Ejemplo «¡Hola Mundo!»',descripcionSubtema:'La sección de arriba suena realmente emocionante, y debería serlo. JavaScript es una de las tecnologías web más emocionantes, y cuando comiences a ser bueno en su uso, tus sitios web entrarán en una nueva dimensión de energía y creatividad.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Sin embargo, sentirse cómodo con JavaScript es un poco más difícil que sentirse cómodo con HTML y CSS. Deberás comenzar poco a poco y continuar trabajando en pasos pequeños y consistentes. Para comenzar, mostraremos cómo añadir JavaScript básico a tu página, creando un «¡Hola Mundo!» de ejemplo (el estándar en los ejemplos básicos de programación).',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Primero, ve a tu sitio de pruebas y crea una carpeta llamada scripts. Luego, dentro de la nueva carpeta de scripts, crea un nuevo archivo llamado main.js y guárdalo.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	A continuación, abre tu archivo index.html e introduce el siguiente código en una nueva línea, justo antes de la etiqueta de cierre </body>',img:'assets/img/Materia2-img6.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'•	Esto hace básicamente el mismo trabajo que el elemento <link> para CSS: aplica el código JavaScript a la página, para que pueda actuar sobre el HTML ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Ahora añade el siguiente código al archivo main.js',img:'assets/img/Materia2-img7.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'•	Finalmente, asegúrate de que has guardado los archivos HTML y JavaScript, y abre index.html en el navegador. Deberías ver algo así:',img:'assets/img/Materia2-img8.jpg'}
                      ]},
            ];
          })
        );
        this.temas =[
          {titulo: '1: Linux', id: 1},
          {titulo: '2: HTML +CSS', id: 2},
          {titulo: '3: JAVA SCRIPT', id: 3}
        ]
      }
      if (this.id == 3){
        this.cantidadTemas= 3;
        this.cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(
          map(({ }) => {
            return [
              { title: 'Tema 1: Representación de datos', cols: 2, rows: 1 , ideT: '1', contenid:"", 
              subtemas:[{TituloSubtema:'1.1 Introducción ',descripcionSubtema:'La representación de datos es el proceso de transformar información en un formato comprensible y manipulable por sistemas digitales. En el contexto digital, esta representación se basa en la utilización de bits, unidades fundamentales que pueden ser 0 o 1, permitiendo la codificación de información de manera eficiente y universal. La introducción a la representación de datos es esencial para comprender cómo la información se estructura y opera en entornos digitales, desde la programación informática hasta las comunicaciones electrónicas. Este tema sienta las bases para explorar los sistemas numéricos, formatos de datos y estrategias de detección y corrección de errores, fundamentales en el ámbito tecnológico moderno.',img:''},
                        {TituloSubtema:'1.2 Sistemas numéricos ',descripcionSubtema:'Los sistemas numéricos son métodos de representación y manipulación de números que utilizan símbolos y reglas específicas. En el ámbito digital, los sistemas numéricos más comunes son:',img:''},
                        {TituloSubtema:'1.2.1 Sistema Decimal ',descripcionSubtema:'En este sistema, que también se conoce como base 10, existen 10 elementos en el conjunto de unidades. Además el orden sucesivo de unidades aumenta de diez en diez. El sistema decimal es el más utilizado alrededor del mundo.Los elementos del conjunto están representados por los siguientes símbolos: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. Para cualquier sistema numérico tenemos una base y un conjunto de elementos que van de 0 a B-1. En donde B es la base del sistema',img:''},
                        {TituloSubtema:'1.2.2 Sistema Binario ',descripcionSubtema:'En este sistema, también conocido como código binario, existen 2 elementos en el conjunto de unidades.Para este sistema B = 2 y los elementos del conjunto están representados por los símbolos 0 y 1.',img:'assets/img/Materia3-img10.jpg'},
                        {TituloSubtema:'1.2.3 Sistema Hexadecimal',descripcionSubtema:'Para este sistema B = 16 y los elementos van de 0 a 15..Cabe mencionar que los elementos de un sistema sólo pueden ser representados por 1 símbolo, por lo que después del símbolo 9 se continua usando las letras del abecedario en mayúsculas.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Dado lo anterior, los símbolos del sistemas son: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Cada sistema numérico se caracteriza por su conjunto de símbolos permitidos y su base B, determinando cómo se expresan y operan los números. Estos sistemas son fundamentales en la programación, electrónica y en la comprensión de la representación de datos en entornos digitales.',img:''},
                        {TituloSubtema:'1.3 Métodos de conversión ',descripcionSubtema:'Son las técnicas utilizadas para transformar un número de un sistema numérico a otro Estos enfoques proporcionan herramientas prácticas y eficientes para la manipulación de números en diferentes bases numéricas.',img:''},
                        {TituloSubtema:'1.3.1 Divisiones Sucesivas',descripcionSubtema:'La División Sucesiva es un método utilizado para convertir un número de B =10 de un sistema numérico a otro. Implica dividir repetidamente el número original por la base del sistema al que se desea convertir, registrando los residuos en cada paso. Los residuos, leídos en orden inverso, constituyen la representación del número en el nuevo sistema.',img:''},
                        {TituloSubtema:'Ejemplo: Se desea convertir 892 (B=10) -----> (B=7)',descripcionSubtema:'descripcion subtema1',img:'assets/img/Materia3-img9.jpg'},
                        {TituloSubtema:'1.3.2 Teorema Fundamental de la numeración(TFN)',descripcionSubtema:'El Teorema Fundamental de la Numeración es un principio esencial en la teoría de sistemas numéricos posicionales. Establece los fundamentos para representar números mediante la asignación de valores a sus dígitos, calculando en la posición que ocupan en la notación.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Método Directo: Este método de TFN solo se puede hacer la conversión de una (B_origen <  B_destino) . Primeramente debemos separar los dígitos  y multiplicar los mismos por la B_origen y elevar los exponentes crecientes desde O a menos que sea un decimal ese empezaría de manera decreciente desde –1 y sumar los mismos.',img:''},
                        {TituloSubtema:'Ejemplo: Convertir de 624,3(B=8) ----->(B=12)',descripcionSubtema:'descripcion subtema1',img:'assets/img/Materia3-img8.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Método Indirecto: Este método de TFN solo se puede hacer la conversión de una B_origen >  B_destino ,Después de seguir los pasos anteriormente dichos ahora después de convertir a B=10 y convertiremos a la B_destino por divisiones sucesivas y la parte decimal se multiplica por la B_destino',img:''},
                        {TituloSubtema:'Ejemplo: 634,3(B=8) ---->(B=12)',descripcionSubtema:'descripcion subtema1',img:'assets/img/Materia3-img7.jpg'},
                        {TituloSubtema:'1.3.3 Método de potencias ',descripcionSubtema:'Una técnica utilizada para convertir un número de un sistema numérico a otro, específicamente cuando se desea expresar un número en términos de las potencias de la base del sistema al que se está convirtiendo se aplica cuando hay  relación entre potencias  y según al apotencia iremos tomando los bits',img:'assets/img/Materia3-img6.jpg'},
                        {TituloSubtema:'Formatos de representación de datos numéricos ',descripcionSubtema:'Estos formatos determinan cómo se asignan y organizan los bits para representar valores numéricos. Incluyen aspectos como la representación de enteros y decimales, la precisión de los números reales (punto flotante), y la forma en que se manejan los números negativos (complemento a dos). La elección del formato afecta directamente la capacidad de almacenamiento y la precisión de los cálculos realizados por los sistemas digitales.',img:''},
                        {TituloSubtema:'Formatos de representación de datos alfanuméricos ',descripcionSubtema:'Estos formatos asignan códigos numéricos a cada carácter, permitiendo su representación y manipulación en sistemas digitales. Ejemplos comunes son ASCII (Código estándar americano para el intercambio de información) y Unicode. Estos códigos alfanuméricos son fundamentales para la representación y comunicación de información textual en computadoras, desde el almacenamiento de archivos hasta la transmisión de datos a través de redes.',img:''},
             ]},
              { title: 'Tema 2: Diseño lógico básico', cols: 2, rows: 1 , ideT: '2', contenid:"", 
              subtemas:[{TituloSubtema:'2.1 Introducción ',descripcionSubtema:'En el contexto del diseño lógico básico, la introducción establece los fundamentos esenciales que guían la creación y comprensión de circuitos lógicos digitales. Este tema se centra en la representación y manipulación de la información utilizando conceptos lógicos, sentando las bases para el diseño y funcionamiento de sistemas digitales. ',img:''},
                        {TituloSubtema:'2.2 Algebra de Boole ',descripcionSubtema:'Son un conjunto de reglas lógicas que rige la manipulación de datos binarios. Estas reglas sirven como base para el diseño de circuitos lógicos.',img:''},
                        {TituloSubtema:'2.3 Teoremas básicos y propiedades',descripcionSubtema:'En este segmento, se abordan teoremas y propiedades fundamentales en el diseño lógico básico. Estos principios son esenciales para simplificar y optimizar circuitos lógicos, permitiendo un diseño más eficiente. Algunos de los teoremas y propiedades destacados incluyen:',img:'assets/img/Materia3-img5.jpg'},
                        {TituloSubtema:'2.5 Compuertas lógicas ',descripcionSubtema:'Las compuertas lógicas son bloques fundamentales en el diseño lógico, encargadas de realizar operaciones lógicas básicas en sistemas digitales. Cada tipo de compuerta tiene una función específica basada en la lógica booleana. Aquí se describen las compuertas lógicas básicas:',img:'assets/img/Materia3-img4.jpg'},
                        {TituloSubtema:'2.6 Formas canónicas y normalizadas ',descripcionSubtema:'El diseño lógico y las funciones booleanas, las formas canónicas y normalizadas son representaciones específicas que facilitan la manipulación y análisis de expresiones lógicas. Aquí se describen brevemente ambas:',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Forma estandarizada',img:'assets/img/Materia3-img3.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'Forma canonica',img:'assets/img/Materia3-img2.jpg'},
                        {TituloSubtema:'2.8 Simplificación de funciones ',descripcionSubtema:'La simplificación de funciones booleanas es un paso crucial en el diseño lógico para reducir la complejidad de los circuitos y mejorar su eficiencia. Aquí se describen algunos métodos comunes para simplificar funciones booleanas:',img:''},
                        {TituloSubtema:'•	Mapas de Karnaugh (K-maps):',descripcionSubtema:'Los mapas de Karnaugh son herramientas gráficas que facilitan la simplificación de funciones booleanas. Cada celda del mapa representa una combinación única de entradas y su correspondiente salida. Agrupando términos adyacentes que contienen "1" en el mapa, se pueden identificar patrones y simplificar la expresión booleana.',img:'assets/img/Materia3-img1.jpg'},
              ]},
              { title: 'Tema 3: Arquitectura de computadoras', cols: 2, rows: 1 , ideT: '3', contenid:"", 
              subtemas:[{TituloSubtema:'3.1 Introducción ',descripcionSubtema:'Este segmento proporciona una visión panorámica de los elementos clave, estructuras y objetivos propios de la arquitectura de computadoras. Se exploran temas como la organización de la CPU, la memoria, las instrucciones de la máquina y la interconexión de componentes, estableciendo la base para comprender cómo los ordenadores procesan y almacenan información. Además, se abordan conceptos introductorios sobre la evolución histórica de la arquitectura de computadoras y su impacto en el desarrollo actual de tecnologías informáticas.',img:''},
                        {TituloSubtema:'3.2 Unidades funcionales básicas ',descripcionSubtema:'Las unidades funcionales básicas en arquitectura de computadoras son los componentes esenciales que colaboran para ejecutar operaciones y procesar datos. Estas unidades incluyen:',img:''},
                        {TituloSubtema:'3.3 Unidad central de proceso ',descripcionSubtema:'Este componente central ejecuta instrucciones, realiza cálculos aritméticos y lógicos, y coordina todas las operaciones del sistema, es decir que es como el cerebro de toda la conputadora',img:''},
                        {TituloSubtema:'3.4 Bus del sistema ',descripcionSubtema:'El bus de sitema permite a la CPU comunicarse con los periféricos de entrada y salida,el bus consta principalmente de dos subconjuntos:',img:''},
                        {TituloSubtema:'3.4.1 Bus de Datos',descripcionSubtema:'Este subconjunto transfiere información, como instrucciones y datos, entre la CPU, la memoria y otros dispositivos periféricos. Es el conducto por el cual los datos son movidos y compartidos dentro del sistema.',img:''},
                        {TituloSubtema:'3.4.2 Bus de Direcciones',descripcionSubtema:'Este subconjunto transporta señales que indican direcciones de memoria específicas. Permite que la CPU acceda a ubicaciones específicas en la memoria para leer o escribir datos. En esencia, el bus de direcciones apunta a dónde deben ir los datos en el sistema',img:''},
                        {TituloSubtema:'3.5 Instrucciones y métodos de direccionamiento ',descripcionSubtema:'Las instrucciones son comandos específicos que la CPU ejecuta para llevar a cabo operaciones. Cada instrucción realiza una tarea única, desde operaciones aritméticas hasta transferencias de datos. Este componente esencial del lenguaje de máquina forma la base de la programación y ejecución de software.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Los metodos de direccionamiento definen cómo se especifican las direcciones de memoria a las que se aplican las instrucciones. Pueden incluir direccionamiento directo, indirecto, inmediato, relativo, entre otros. Cada método tiene implicaciones en la forma en que se accede y manipula la información almacenada en la memoria.',img:''},
                        {TituloSubtema:'3.6 Ejecución de instrucciones ',descripcionSubtema:'La ejecución de instrucciones es el núcleo dinámico del funcionamiento de una unidad central de procesamiento (CPU) en una arquitectura de computadoras. Este proceso implica varias etapas coordinadas que permiten a la CPU llevar a cabo las tareas específicas indicadas por las instrucciones del programa. A continuación, se destacan las etapas clave de la ejecución de instrucciones:',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Buscar Instrucción: La CPU recupera la siguiente instrucción desde la memoria principal utilizando el contador de programa (PC). Este contador indica la dirección de memoria de la próxima instrucción a ejecutar.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Decodificar Instrucción: La instrucción recuperada se decodifica para comprender la operación que debe realizar la CPU. Esto implica interpretar los códigos de operación y determinar las direcciones de los operandos si es necesario.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Buscar Operandos: Si la instrucción requiere datos desde la memoria, la CPU busca los operandos necesarios. Estos operandos pueden residir en registros internos o en ubicaciones de memoria específicas.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Ejecutar Operación: La CPU realiza la operación indicada por la instrucción. Esto puede implicar operaciones aritméticas, lógicas, de transferencia de datos, entre otras. Los resultados se almacenan temporalmente en registros internos',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Almacenar Resultados: Los resultados de la operación se almacenan de nuevo en la memoria o en registros internos según sea necesario. Además, el contador de programa se actualiza para apuntar a la siguiente instrucción.',img:''},
                        {TituloSubtema:'3.7 Interrupciones ',descripcionSubtema:'Cuando ocurre una interrupción, la CPU suspende momentáneamente la ejecución actual y atiende la solicitud asociada con la interrupción. Después de manejar la interrupción, la CPU reanuda la ejecución normal del programa desde el punto en que se interrumpió.',img:''},
                        {TituloSubtema:'3.8 Memoria y tipos de memorias ',descripcionSubtema:'Esta sección se centra en la memoria, un componente crítico en la arquitectura de computadoras que almacena y recupera datos e instrucciones para su procesamiento. Se exploran diversos tipos de memorias, cada uno con características específicas que influyen en el rendimiento y la funcionalidad del sistema.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Memoria Principal (RAM): Esta forma de memoria proporciona acceso rápido a datos e instrucciones durante la ejecución de programas. La RAM es volátil, lo que significa que pierde su contenido cuando la computadora se apaga. Es fundamental para el rendimiento en tiempo real y la multitarea.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Memoria de Almacenamiento Secundario (por ejemplo, discos duros, SSD): A diferencia de la RAM, esta memoria ofrece almacenamiento a largo plazo para programas y datos incluso cuando la computadora está apagada. Es no volátil y permite el almacenamiento de grandes cantidades de información.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Memoria Caché: Ubicada más cerca de la CPU que la RAM, la caché almacena copias temporales de datos e instrucciones frecuentemente utilizados. Su proximidad acelera el acceso y mejora el rendimiento global del sistema.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Memoria ROM (Read-Only Memory): Almacena datos que no cambian durante la operación normal, como el firmware del sistema. Es no volátil y retiene su contenido incluso cuando la energía se corta.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Memoria Flash: Se utiliza en dispositivos de almacenamiento extraíbles y en unidades SSD. Combina características de RAM y ROM, siendo regrabable como la RAM pero no volátil como la ROM.',img:''},
                        {TituloSubtema:'3.9 Dispositivos de almacenamiento',descripcionSubtema:'Los dispositivos de almacenamiento son componentes esenciales en sistemas informáticos que permiten la retención de datos a largo plazo. Aquí tienes una descripción concisa de algunos dispositivos comunes de almacenamiento:',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Disco Duro (HDD - Hard Disk Drive): Utiliza discos magnéticos para almacenar datos. Es una forma de almacenamiento de gran capacidad y costo efectivo, comúnmente utilizada en computadoras de escritorio y portátiles.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Unidad de Estado Sólido (SSD - Solid State Drive): Almacena datos en chips de memoria flash, proporcionando acceso más rápido que los discos duros tradicionales. Los SSD son más eficientes en términos de energía y son comúnmente utilizados en laptops y sistemas que buscan un rendimiento rápido.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Memoria Flash: Presente en unidades USB, tarjetas de memoria y SSD, la memoria flash utiliza celdas de memoria no volátil para almacenar datos. Es portátil y se utiliza para transferir y almacenar datos de manera temporal o permanente.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Dispositivos Ópticos (por ejemplo, CD, DVD, Blu-ray): Utilizan tecnología láser para leer y escribir datos en discos ópticos. Aunque han perdido popularidad en comparación con dispositivos más modernos, aún se utilizan para ciertas aplicaciones.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Nube (Cloud Storage): Almacena datos de forma remota en servidores a los que se accede a través de Internet. Ofrece flexibilidad y accesibilidad desde cualquier lugar, siendo servicios como Google Drive y Dropbox ejemplos comunes.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Unidades de Red (Network Attached Storage - NAS): Dispositivos dedicados conectados a una red que proporcionan almacenamiento compartido y accesible desde varios dispositivos.',img:''},
                        {TituloSubtema:'3.10 Dispositivos periféricos',descripcionSubtema:'Los dispositivos periféricos son componentes externos conectados a una computadora que amplían su funcionalidad y permiten la interacción entre el usuario y la máquina. Aquí hay una descripción breve de algunos dispositivos periféricos comunes:',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Teclado: Permite la entrada de datos al sistema a través de la pulsación de teclas. Esencial para la introducción de texto y comandos.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Ratón o Dispositivo Puntero: Facilita la interacción con la interfaz gráfica del usuario al mover un cursor en la pantalla. Utilizado para hacer clic, arrastrar y soltar elementos.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Monitor o Pantalla: Muestra la información visual generada por la computadora. Existen varios tipos, como monitores LCD, LED, y OLED, con diferentes tamaños y resoluciones.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Impresora: Permite la salida física de documentos desde la computadora. Hay impresoras láser, de inyección de tinta y matriciales, entre otros tipos..',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Unidad de CD/DVD/Blu-ray: Lee y, en algunos casos, graba discos ópticos para el almacenamiento de datos, música o videos.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Dispositivos de Almacenamiento Externo: Incluyen unidades flash USB, discos duros externos y tarjetas de memoria, que permiten la transferencia y almacenamiento portátil de datos.',img:''},
              ]},
            ];
          })
        );
        this.temas =[
          {titulo: '1: Representación de datos', id: 1},
          {titulo: '2: Diseño lógico básico', id: 2},
          {titulo: '3: Arquitectura de computadoras', id: 3}
        ]
      }
      if (this.id == 4){
        this.cantidadTemas= 5;
        this.cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(
          map(({ }) => {
            return [
              { title: 'Tema 1: Lógica Matemática', cols: 2, rows: 1 , ideT: '1', contenid:"", 
              subtemas:[{TituloSubtema:'1.1 Introducción',descripcionSubtema:'La lógica matemática es una rama de las matemáticas que se ocupa del estudio formal del razonamiento y la inferencia. En este tema introductorio, se exploran los conceptos fundamentales que constituyen la base de la lógica matemática.' ,img:''},
                        {TituloSubtema:'1.2 Proposición y valor de verdad',descripcionSubtema:'En la lógica matemática, las proposiciones son fundamentales para construir argumentos y razonamientos.' ,img:''},
                        {TituloSubtema:'',descripcionSubtema:'Una proposición es una afirmación declarativa que puede ser clasificada como verdadera o falsa, pero no ambas. Las proposiciones se utilizan como componentes básicos para construir argumentos y expresiones lógicas más complejas. Las conectivas lógicas, como AND (∧), OR (∨), y NOT (¬), permiten combinar proposiciones para formar expresiones más complejas. La verdad o falsedad de estas expresiones depende de los valores de verdad de las proposiciones subyacentes.' ,img:''},
                        {TituloSubtema:'1.3 Algebra Proposiciones',descripcionSubtema:'El álgebra de proposiciones es una rama de la lógica matemática que se centra en manipular y combinar proposiciones mediante operaciones lógicas, el valor de verdad de una proposición es su condición de ser verdadera o falsa en un contexto particular. Se le puede denotar con p=A  para verdadero y q=B para falso' ,img:'assets/img/AlgebraImg3.jpg'},
                        {TituloSubtema:'1.3.1 Leyes lógicas',descripcionSubtema:'Las leyes lógicas son principios fundamentales que gobiernan la manipulación y la relación entre proposiciones en el ámbito de la lógica matemática. Aquí se presentan algunas de las leyes lógicas más importantes , sean p, q, r cualesquiera proposiciones, Entonces se cumplen las siguientes equivalencias:' ,img:'assets/img/AlgebraImg2.jpg'},
                        {TituloSubtema:'1.4 Razonamiento Deductivo Valido o Inferencia lógica',descripcionSubtema:'El razonamiento deductivo se refiere a la forma de razonamiento en la que se deriva una conclusión a partir de premisas de manera lógica. Se considera válido cuando la verdad de las premisas son principios lógicos que se aplican para derivar conclusiones de manera válida garantizan la verdad de la conclusión. ' ,img:'assets/img/AlgebraImg1.jpg'},
                        {TituloSubtema:'',descripcionSubtema:'El razonamiento deductivo válido es esencial en la lógica y la matemática, ya que proporciona un marco lógico para la inferencia y la construcción de argumentos sólidos.' ,img:''},
                      ]},
              { title: 'Tema 2: Conjuntos', cols: 2, rows: 1 , ideT: '2', contenid:"", 
              subtemas:[{TituloSubtema:'2.1 Introducción',descripcionSubtema:'En el ámbito de las matemáticas, un conjunto es un concepto fundamental que proporciona un marco para organizar y clasificar objetos ',img:''},
                        {TituloSubtema:'2.1.1 Conjunto',descripcionSubtema:'Un conjunto es una colección bien definida de objetos, considerados como una entidad única. Estos objetos pueden ser números, letras, personas, o cualquier entidad que pueda ser claramente identificada.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'En un contexto específico, el conjunto que contiene todos los elementos relevantes se llama conjunto universal y se denota como U',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Los conjuntos se representan generalmente entre llaves {}. Por ejemplo, el conjunto de números naturales menores que 5 se escribiría como {1,2,3,4} Un conjunto que no contiene elementos se llama conjunto vacío y se denota por ∅ o {}.',img:''},
                        {TituloSubtema:'2.1.2 Subconjunto',descripcionSubtema:'Un conjunto B es un subconjunto de A (se denota como B⊆A) si cada elemento de B también es un elemento de A. Un conjunto es subconjunto de sí mismo, y el conjunto vacío es subconjunto de cualquier conjunto.',img:''},
                        {TituloSubtema:'2.2 Relación de inclusión y igualdad',descripcionSubtema:'La relación de inclusión, denotada como A⊆B, indica que cada elemento de A también es un elemento de B. FormalmenteA⊆B si para todo x en A, se cumple que x∈B. Si A⊆B y además A≠B, entonces A es un subconjunto propio de B, denotado como A⊂B.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Dos conjuntos A y B son iguales, denotado como A=B, si y solo si tienen exactamente los mismos elementos. En otras palabras, A⊆B y B⊆A. Si dos conjuntos son iguales, se puede escribir A⊆B o B⊆A, pero en el contexto de igualdad, la notación A=B se prefiere para enfatizar que ambos conjuntos son idénticos.',img:''},
                        {TituloSubtema:'2.3 Unión y Intersección de Conjuntos',descripcionSubtema:'La unión de dos conjuntos A y B, denotada como A∪B, es el conjunto que contiene todos los elementos que pertenecen a A, a B, o a ambos.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Formalmente, A∪B={x∣x∈A o x∈B} ; Ejemplo: Si A={1,2,3} y B={3,4,5}, entonces A∪B={1,2,3,4,5}.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'La intersección de dos conjuntos A y B, denotada como A∩B, es el conjunto que contiene todos los elementos que pertenecen tanto a A como a B.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Formalmente, A∩B={x∣x∈A y x∈B} ; Ejemplo: Si A={1,2,3} y B={3,4,5}, entonces A∩B={3}.',img:''}
                      ]},
              { title: 'Tema 3: Relaciones y funciones', cols: 2, rows: 1 , ideT: '3', contenid:"", 
              subtemas:[{TituloSubtema:'3.1 Introducción',descripcionSubtema:'En matemáticas, las relaciones y funciones son conceptos fundamentales que describen cómo elementos de un conjunto se relacionan entre sí. ',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Una relación entre dos conjuntos, digamos A y B, es un conjunto de pares ordenados (a,b) donde a es de A y b es de B. Se denota como R. Formalmente, R es una relación de A a B si R⊆A×B.',img:''},
                        {TituloSubtema:'3.2 Relaciones Binarias',descripcionSubtema:'Una relación binaria en un conjunto A es un subconjunto del producto cartesiano A×A. Es decir, es un conjunto de pares ordenados donde ambos elementos pertenecen al mismo conjunto es decir R⊆A×A.',img:''},
                        {TituloSubtema:'3.2.1 Tipos de Relaciones Binarias:',descripcionSubtema:'Reflexiva: Cada elemento a∈A está relacionado consigo mismo (aRa para todo a).',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Simétrica: Si aRb, entonces bRa para todo a,b∈A.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Transitiva: Si aRb y bRc, entonces aRc para todo a,b,c∈A.',img:''},
                        {TituloSubtema:'3.2.2 Clausuras de Relaciones:',descripcionSubtema:'Clausura Reflexiva: La menor relación reflexiva que contiene a  R.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Clausura Simétrica: La menor relación simétrica que contiene a R.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Clausura Transitiva: La menor relación transitiva que contiene a R.',img:''},
                        {TituloSubtema:'3.3 Funciones',descripcionSubtema:'Una función f:A→B es una relación que asigna a cada elemento a∈A exactamente un elemento b∈B. Cada elemento de A tiene una imagen única en B.',img:''},
                        {TituloSubtema:'3.3.1 Inyectividad, Sobreyectividad y Biyectividad:',descripcionSubtema:'Inyectiva (Uno a Uno): Cada elemento de A se asigna a un único elemento de B.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Sobreyectiva (Sobre): La imagen de f abarca todo el contradominio B.1',img:''},
                        {TituloSubtema:'',descripcionSubtema:'Biyectiva: Es inyectiva y sobreyectiva.',img:''},
                        {TituloSubtema:'3.3.2 Composición de Funciones:',descripcionSubtema:'La composición de dos funciones f:A→B y g:B→C es una nueva función h:A→C definida por h(a)=g(f(a)).',img:''},
                        {TituloSubtema:'Funciones Inversas',descripcionSubtema:'Si f:A→B es biyectiva, existe una función inversa f−1:B→A tal que f−1(f(a))=a para todo a∈A y f(f−1(b))=b para todo ∈B.',img:''}
                      ]},
              { title: 'Tema 4: Números Naturales y Enteros', cols: 2, rows: 1 , ideT: '4', contenid:"", 
              subtemas:[{TituloSubtema:'4.1 Conjunto de números naturales',descripcionSubtema:'El conjunto de números naturales, denotado comonortenorte, es una secuencia infinita de números que se utiliza principalmente para contar y ordenar elementos. Comienza desde el número 1 y se extiende indefinidamente hacia arriba:  A={ 1 ,2 ,3 ,4 ,5 ,… }',img:''},
                        {TituloSubtema:'4.1.1 Inducción Matemática',descripcionSubtema:'La inducción matemática es un método de demostración utilizado para establecer afirmaciones matemáticas para todos los números naturales. El proceso ti',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Base Paso: Se demuestra que la afirmación es verdadera para el primer número natural (a menudo, para A=1).',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Pasos Inductivos: Se asume que la afirmación es verdadera para un número natural arbitrario k(hipótesis de inducción) y luego se demuestra que estok+1.',img:''},
                        {TituloSubtema:'4.1.2 Relación de ordenen el conjunto de números naturales',descripcionSubtema:'La relación de orden en los números naturales cumple con las siguientes propiedades:',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Reflexividad: Cualquier número natural es siempre menor o igual a sí mismo. Para todo a en los números naturales a≤a.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Antisimétrica: Si un número natural a es menor o igual a ybes menor o igual a a, entonces a y b son iguales. En términos matemáticos, si a≤b y b ≤a, entonces a=b.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Transitividad: Si a es menor o igual a b, y b es menor o igual aC, entonces a es menor o igual a C. En términos matemáticos, si a≤b y b≤C, entonces a≤C.',img:''},
                        {TituloSubtema:'4.2 Conjunto de números enteros',descripcionSubtema:'El conjunto de números enteros, denotado comozz, incluye todos los números naturales junto con sus opuestos (números negativos) y el cero: z={ …,− 3 ,− 2 ,− 1 ,0 ,1 ,2 ,3 ,… } ',img:''},
                        {TituloSubtema:'4.3 Máximo común divisor',descripcionSubtema:'El máximo común divisor de dos números enteros.ayb, denotado comoMCD ( un ,b ), es el mayor entero positivo que divide a ambos a y b. Algunas propiedades importantes incluyen:',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	MCD ( un ,b )=MCD ( b ,a )(Propiedad conmutativa).',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	MCD ( un ,0 )=∣ un ∣para todoa≠0 a=0.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	MCD(MCD ( un ,b )=MCD ( un−b ,b )(Identidad de Bezout).',img:''},
                      ]},
              { title: 'Tema 5: Estructuras Algebraicas', cols: 2, rows: 1 , ideT: '5', contenid:"", 
              subtemas:[{TituloSubtema:'5.1 Concurrencia en Z y Aritmética Modular',descripcionSubtema:'En este tema, exploraremos la noción de concurrencia en el conjunto de números enteros, Z, y la aplicación de la aritmética modular en este contexto. La concurrencia, en términos algebraicos, se refiere a la ocurrencia simultánea de eventos o propiedades en una estructura matemática dada.',img:''},
                        {TituloSubtema:'5.2 Grupos',descripcionSubtema:'Exploraremos la definición formal de un grupo, destacando la importancia de la cerradura, la existencia de un elemento neutro, la existencia de elementos inversos y la propiedad asociativa. Veremos cómo estas características fundamentales permiten modelar y comprender una variedad de fenómenos matemáticos y aplicaciones prácticas.',img:''},
                        {TituloSubtema:'5.2.1 Propiedad de los grupos',descripcionSubtema:'En esta subsección, profundizaremos en las propiedades esenciales que caracterizan a los grupos y que son fundamentales para comprender su estructura y funcionamiento.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Clausura: La operación en un grupo debe producir un resultado que pertenezca al mismo grupo.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Elemento Neutro: Existe un elemento neutro que, al combinarse con cualquier elemento del grupo, no altera dicho elemento.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Inversos: Cada elemento en el grupo tiene un inverso tal que, combinándolo con el elemento original, se obtiene el elemento neutro.',img:''},
                        {TituloSubtema:'',descripcionSubtema:'•	Asociatividad: La propiedad de asociatividad establece que la agrupación de elementos en una operación no afecta el resultado final.',img:''},
                        {TituloSubtema:'5.2.2 Subgrupos',descripcionSubtema:'Un subgrupo es un conjunto no vacío de un grupo más grande que, bajo la misma operación, forma un grupo por sí mismo. Analizaremos cómo los subgrupos heredan las propiedades esenciales de los grupos, como la clausura, la existencia del elemento neutro y de inversos.',img:''},
                      ]},
            ];
          })
        );
        this.temas =[
          {titulo: '1: Lógica Matemática', id: 1},
          {titulo: '2: Conjuntos', id: 2},
          {titulo: '3: Relaciones y funciones', id: 3},
          {titulo: '4: Números Naturales y Enteros', id: 4},
          {titulo: '5: Estructuras Algebraicas', id: 5}
        ]
      }
      if (this.id == 5){
        this.cantidadTemas= 6;
        this.cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(
          map(({ }) => {
            return [
              { title: 'Tema 1: Vectores.', cols: 2, rows: 1 , ideT: '1', contenid:"En nuestro estudio de la física, a menudo tenemos que trabajar con cantidades físicas que tienen tanto propiedades numéricas como de dirección. Como se indicó en la sección 2.1, las cantidades de esta naturaleza son cantidades vectoriales. Este capítulo se ocupa principalmente de las propiedades generales de cantidades vectoriales. Se discute la suma y resta de cantidades vectoriales, junto con algunas aplicaciones comunes a situaciones físicas. Las cantidades vectoriales se utilizan en todo el texto. Por lo tanto, es imperativo que usted domine las técnicas descritas en este capítulo.", 
              subtemas: [{TituloSubtema:'Sistemas coordenados.',descripcionSubtema:'Muchos aspectos de la física involucran una descripción de una ubicación en el espacio. En dos dimensiones esta descripción se logra con el uso del sistema de coordenadas cartesianas, en el que ejes perpendiculares cruzan en un punto definido como el origen. A veces es más conveniente representar un punto en un plano por sus coordenadas polares planas (r, u). A veces es más conveniente representar un punto en un plano por sus coordenadas polares planas (r, u) las manecillas del reloj desde el mismo.'},
                    {TituloSubtema:'Cantidades vectoriales y escalares',descripcionSubtema:'Una cantidad escalar se especifica por completo mediante un valor único con una unidad adecuada y no tiene dirección. Una cantidad vectorial se especifica por completo mediante un número y unidades apropiadas más una dirección.'},
                    {TituloSubtema:'Algunas propiedades de los vectores',descripcionSubtema:'Para muchos propósitos, dos vectores A S y B S se definen como iguales si tienen la misma magnitud y si apuntan en la misma dirección. Esto es, A S 5 B S sólo si A B y si A S y B S apuntan en la misma dirección a lo largo de rectas paralelas. Por ejemplo, todos los vectores en la figura 3.5 son iguales aun cuando tengan diferentes puntos de inicio. Dicha propiedad permite mover, en un diagrama, un vector a una posición paralela a sí mismo sin afectar al vector.'}
                  ,{TituloSubtema:'',descripcionSubtema:'Una forma conveniente de describir las reglas para sumar vectores es mediante un método gráfico. Para sumar el vector B S al vector A S , primero dibuje el vector A S en papel gráfico, con su magnitud representada mediante una escala de longitud conveniente, y luego dibuje el vector B S a la misma escala, con su origen iniciando desde la punta de A S , como se muestra en la figura 3.6. El vector resultante R S 5 A S 1 B S es el vector que se dibuja desde el origen de A S a la punta de B S .'}
                  ,{TituloSubtema:'',descripcionSubtema:'El negativo del vector A S se define como el vector que, cuando se suma con A S , da cero para la suma vectorial. Esto es: A S 1 12 A S 2 5 0. Los vectores A S y 2 A S tienen la misma magnitud pero apuntan en direcciones opuestas.'}
                  ,{TituloSubtema:'',descripcionSubtema:'Si el vector A S se multiplica por una cantidad escalar positiva m, el producto m A S es un vector que tiene la misma dirección que A S y magnitud mA. Si el vector A S se multiplica por una cantidad escalar negativa m, el producto 2m A S tiene una dirección opuesta a A S . Por ejemplo, el vector 5 A S es cinco veces más largo que A S y apunta en la misma dirección que A S el vector 21 3 A S ; es un tercio la longitud de A S y apunta en la dirección opuesta a A S .'}
                  
                  ]},
              { title: 'Tema 2: Movimiento en dos dimensiones', cols: 1, rows: 1 , ideT: '2', contenid:"Como una primera etapa en el estudio de la mecánica clásica, se describe el movimiento de un objeto ignorando las interacciones con agentes externos que pueden causar o modificar dicho movimiento. Esta parte de la mecánica clásica se llama cinemática. (La palabra cinemática tiene la misma raíz que cinema.) En este capítulo se considera sólo el movimiento en una dimensión, esto es: el movimiento de un objeto a lo largo de una línea recta", 
              subtemas:[{TituloSubtema:'Posición, velocidad y rapidez',descripcionSubtema:'La posición x de una partícula es la ubicación de la partícula respecto a un punto de referencia elegido que se considera el origen de un sistema coordenado. El movimiento de una partícula se conoce por completo si la posición de la partícula en el espacio se conoce en todo momento.'},
                        {TituloSubtema:'',descripcionSubtema:'El desplazamiento Dx de una partícula se define como su cambio en posición en algún intervalo de tiempo. Conforme la partícula se mueve desde una posición inicial xi a una posición final xf , su desplazamiento está dado por xfinal- xinicial.'},
                        {TituloSubtema:'',descripcionSubtema:'La velocidad promedio vx,prom de una partícula se define como el desplazamiento x de la partícula dividido entre el intervalo de tiempo t durante el que ocurre dicho desplazamiento: vprom= deltaDesplazamiento/deltaTiempo.'},
                        {TituloSubtema:'',descripcionSubtema:'a rapidez promedio vprom de una partícula, una cantidad escalar, se define como la distancia total recorrida dividida entre el intervalo de tiempo total requerido para recorrer dicha distancia: RapidezPromedio= desplazamiento/deltaTiempo'},
                        {TituloSubtema:'Análisis de modelo: la partícula bajo velocidad constante',descripcionSubtema:'Un análisis de modelo es una situación común que se presenta una y otra vez en la resolución de problemas de física. Puesto que representa una situación común, también representa un tipo común de problemas que ya se ha resuelto. Cuando se identifica un análisis de modelo en un nuevo problema, la solución al nuevo problema se puede modelar después de que el problema previo ya fue resuelto. Los análisis de modelos nos ayudan a reconocer situaciones comunes y nos guían hacia una solución al problema. '},
                        {TituloSubtema:'',descripcionSubtema:'Si la velocidad de una partícula es constante, su velocidad instantánea en cualquier instante durante un intervalo de tiempo es la misma que la velocidad promedio durante el intervalo. Esto es, vx 5 vx,prom. '},
                        {TituloSubtema:'Aceleración',descripcionSubtema:'Considere que un objeto representado como una partícula en movimiento a lo largo del eje x tiene una velocidad inicial vxi en el tiempo ti en la posición y una velocidad final vxf en el tiempo tf , en la posición como en la figura 2.6a. La curva roja en la figura 2.6b muestra cómo cambia la velocidad con el tiempo. La aceleración promedio ax,prom de la partícula se define como el cambio en velocidadDvx dividido entre el intervalo de tiempo t durante el que ocurre el cambio:'}
                  ]},
              { title: 'Tema 3: Las leyes del movimiento', cols: 1, rows: 2 , ideT: '3', contenid:"¿por qué cambia el movimiento de un objeto? ¿Qué hace que un objeto permanezca en reposo y que otro acelere? ¿Por qué, en general, es más fácil mover un objeto pequeño que uno más grande? Los dos factores principales en los que es necesario reflexionar son las fuerzas que actúan sobre un objeto y la masa del objeto. En este capítulo se inicia el estudio de la dinámica al discutir las tres leyes de movimiento básicas, las cuales se relacionan con fuerzas y masas y que Isaac Newton formuló hace más de tres siglos", 
              subtemas:[{TituloSubtema:'Concepto de fuerza',descripcionSubtema:'Cada uno tiene una comprensión básica del concepto de fuerza a partir de la experiencia cotidiana. Cuando aleja un plato de comida vacío, ejerce una fuerza sobre él. De igual modo, cuando se lanza o patea una pelota se ejerce una fuerza sobre ella. En estos ejemplos, la palabra fuerza se refiere a una interacción con un objeto mediante actividad muscular y algún cambio en la velocidad del objeto. Sin embargo, las fuerzas no siempre causan movimiento. Por ejemplo, cuando está sentado, sobre su cuerpo actúa una fuerza gravitacional y aun así usted permanece fijo. Como segundo ejemplo, puede empujar (en otras palabras, ejercer una fuerza) sobre una gran roca y no ser capaz de moverla'},
                        {TituloSubtema:'Primera Ley de newton',descripcionSubtema:'La Primera Ley de Newton establece que un objeto permanecerá en reposo o en movimiento rectilíneo uniforme a menos que una fuerza neta actúe sobre él. En otras palabras, un cuerpo no cambiará su estado de movimiento a menos que una fuerza externa lo obligue a hacerlo.'},
                        {TituloSubtema:'Masa',descripcionSubtema:'La masa de un objeto es una medida de su cantidad de materia. Es una propiedad escalar que determina la inercia de un objeto, es decir, su resistencia a cambiar su estado de movimiento. La masa se mide en kilogramos (kg).'},
                        {TituloSubtema:'Segunda ley de Newton',descripcionSubtema:'La Segunda Ley de Newton establece que la aceleración de un objeto es directamente proporcional a la fuerza neta que actúa sobre él e inversamente proporcional a su masa. Se expresa mediante la fórmula F=ma, donde F es la fuerza neta aplicada, m es la masa del objeto y a es la aceleración resultante.'},
                        {TituloSubtema:'Fuerza gravitacional y peso',descripcionSubtema:'La fuerza gravitacional es la atracción mutua entre dos objetos con masa. El peso de un objeto es la fuerza gravitacional que actúa sobre él y se calcula como el producto de la masa del objeto y la aceleración debida a la gravedad P=mg, donde P es el peso, m es la masa y g es la aceleración debida a la gravedad).'},
                        {TituloSubtema:'Tercera ley de Newton',descripcionSubtema:'La Tercera Ley de Newton establece que por cada acción hay una reacción igual y opuesta. Esto significa que, si un objeto A ejerce una fuerza sobre un objeto B, entonces el objeto B ejerce una fuerza de igual magnitud pero en dirección opuesta sobre el objeto A. Estas fuerzas se presentan en pares acción-reacción.'}
                  ]},
              { title: 'Tema 4: Movimiento circular y otras aplicaciones de las leyes de Newton', cols: 1, rows: 1 , ideT: '4', contenid:"El movimiento circular y sus aplicaciones en el contexto de las leyes de Newton se exploran mediante el análisis de objetos en trayectorias curvas. En este contexto, la primera ley de Newton establece que un objeto en movimiento circular continuará en esa trayectoria a menos que una fuerza externa actúe sobre él. La segunda ley se aplica al considerar las fuerzas centrípetas necesarias para mantener un objeto en movimiento circular uniforme. Asimismo, la tercera ley de Newton se evidencia en las fuerzas de reacción entre los cuerpos interactuantes en sistemas de movimiento circular. Estos principios son fundamentales para entender fenómenos como la órbita planetaria, el movimiento de vehículos en curvas y otros escenarios que involucran fuerzas centrípetas y centrífugas.", 
              subtemas: [{TituloSubtema:'Extensión de la partícula en el modelo del movimiento circular uniforme',descripcionSubtema:'La extensión de la partícula en el contexto del movimiento circular uniforme se refiere a la descripción de la posición de una partícula en movimiento circular en términos de ángulos y radios. En este modelo, la partícula se desplaza a lo largo de un círculo con una velocidad constante, y su posición se especifica mediante la medida angular y la distancia radial desde el centro del círculo.'},
                    {TituloSubtema:'Movimiento circular no uniforme',descripcionSubtema:'Contrario al movimiento circular uniforme, el movimiento circular no uniforme implica cambios en la velocidad angular de la partícula a medida que se mueve a lo largo de la circunferencia. La velocidad angular varía, lo que significa que la magnitud de la velocidad no es constante. Para describir este movimiento, es necesario considerar la aceleración angular, que puede ser causada por una fuerza neta actuando sobre la partícula.'},
                    {TituloSubtema:'Movimiento en marcos acelerados',descripcionSubtema:'El movimiento en marcos acelerados se refiere al análisis de la cinemática y dinámica de partículas o sistemas en referencia a marcos de referencia que están experimentando aceleración. En este contexto, las leyes del movimiento se adaptan para tener en cuenta la aceleración del marco de referencia, y se introducen fuerzas ficticias (fuerzas de inercia) para explicar el movimiento aparente de los objetos desde el punto de vista del marco acelerado. Este enfoque es especialmente útil en situaciones donde el observador se encuentra en un sistema de referencia que está acelerándose en relación con un sistema inercial.'},
                    {TituloSubtema:'Movimiento en presencia de fuerzas resistivas',descripcionSubtema:'Cuando un objeto se desplaza a través de un medio, como el aire o una superficie, la presencia de fuerzas resistivas puede afectar significativamente su movimiento. La magnitud de estas fuerzas suele depender de la velocidad del objeto y de factores como la forma y la naturaleza de la superficie con la que interactúa. En el caso de la fricción del aire, por ejemplo, a medida que un objeto se mueve a través del aire, este experimenta una resistencia que aumenta con la velocidad. Esto puede dar lugar a una fuerza opuesta al movimiento que eventualmente equilibra las fuerzas impulsoras, como la gravedad o una fuerza aplicada, llevando al objeto a alcanzar una velocidad constante, conocida como velocidad terminal.'}
                  ]},
              { title: 'Tema 5: Energía de un sistema', cols: 1, rows: 1 , ideT: '4', contenid:"Las definiciones de cantidades tales como posición, velocidad, aceleración y fuerza, junto con principios como los de la segunda ley de Newton, han permitido resolver una variedad de problemas. Sin embargo, algunos problemas que podrían resolverse teóricamente con las leyes de Newton, son muy difíciles en la práctica, pero es posible simplificarlos con un planteamiento diferente. Aquí y en los capítulos siguientes se investigará este nuevo planteamiento, que incluirá definiciones de cantidades que tal vez no le sean familiares. Otras cantidades pueden sonar familiares, pero adquieren significados más específicos en física que en la vida cotidiana. El análisis comienza al explorar la noción de energía.", 
              subtemas: [{TituloSubtema:'Sistemas y entornos',descripcionSubtema:'En el contexto de la física, un sistema es una porción específica del universo que se elige para su estudio, mientras que el entorno comprende todo lo que no forma parte del sistema. La delimitación entre sistema y entorno depende del análisis que se esté llevando a cabo.'},
                   {TituloSubtema:'Trabajo realizado por una fuerza constante',descripcionSubtema:'El trabajo realizado por una fuerza constante sobre un objeto se calcula multiplicando la magnitud de la fuerza por la distancia en la dirección de la fuerza. La fórmula es Trabajo=F⋅d⋅cos(θ), donde F es la magnitud de la fuerza, d es la distancia y θ es el ángulo entre la dirección de la fuerza y la dirección del desplazamiento.'},
                   {TituloSubtema:'Trabajo realizado por una fuerza variable',descripcionSubtema:'Cuando la fuerza que actúa sobre un objeto varía, el trabajo realizado se obtiene integrando la función de la fuerza con respecto al desplazamiento. La integral definida de W=∫F dx proporciona el trabajo total.'},
                   {TituloSubtema:'Energía cinética y el teorema trabajo-energía cinética',descripcionSubtema:'La energía cinética de un objeto en movimiento se define como Ek=1/2  mv2, donde m es la masa y v es la velocidad. El teorema trabajo-energía cinética establece que el trabajo realizado sobre un objeto es igual a la variación de su energía cinética, expresado como Trabajo = ΔEk.'},
                   {TituloSubtema:'Energía potencial de un sistema',descripcionSubtema:'La energía potencial es la capacidad de un sistema para realizar trabajo debido a su posición o configuración. En el contexto gravitacional, la energía potencial gravitacional se expresa como U=mgh, donde m es la masa, g es la aceleración debida a la gravedad y h es la altura.'},
                   {TituloSubtema:'Fuerzas conservativas y no conservativas ',descripcionSubtema:'Las fuerzas conservativas son aquellas que realizan un trabajo independiente de la trayectoria y dependen solo de las posiciones inicial y final del objeto. Un ejemplo común es la fuerza gravitatoria. Por otro lado, las fuerzas no conservativas, como la fricción o la fuerza de arrastre del aire, realizan un trabajo que depende de la trayectoria y disipan la energía mecánica del sistema.'},
                   {TituloSubtema:'Relación entre fuerzas conservativas y energía potencial',descripcionSubtema:'Para fuerzas conservativas, existe una relación directa con la energía potencial. La variación de la energía potencial con respecto al desplazamiento es igual a la componente negativa del trabajo realizado por la fuerza conservativa. Matemáticamente, esto se expresa como −ΔU=W, donde ΔU es el cambio en la energía potencial y W es el trabajo realizado.'},
                  
                  ]},
              { title: 'Tema 6: Conservación de la energía', cols: 1, rows: 1 , ideT: '4', contenid:"La ley de conservación de la energía establece que la energía total de un sistema aislado se mantiene constante si no hay intercambio de energía con el entorno. La energía puede transformarse de una forma a otra (por ejemplo, de energía cinética a energía potencial), pero la cantidad total de energía permanece constante.", 
              subtemas: [{TituloSubtema:'sistema no aislado (energía)',descripcionSubtema:'En un sistema no aislado, la energía del sistema puede cambiar debido a la transferencia de energía con el entorno. Pueden existir interacciones con fuerzas externas o intercambio de energía en forma de trabajo o calor, lo que afecta la energía total del sistema.'},
                   {TituloSubtema:'sistema aislado (energía)',descripcionSubtema:'Un sistema aislado es aquel que no intercambia energía con su entorno. En un sistema aislado, la  suma total de energía (cinética y potencial) se mantiene constante a lo largo del tiempo.'},
                   {TituloSubtema:'Situaciones que incluyen fricción cinética',descripcionSubtema:'En situaciones que incluyen fricción cinética, la energía mecánica del sistema disminuye con el tiempo debido al trabajo negativo realizado por la fuerza de fricción. La energía mecánica se transforma en calor y otras formas de energía no mecánica.'},
                   {TituloSubtema:'Cambios en la energía mecánica para fuerzas no conservativas',descripcionSubtema:'Para fuerzas no conservativas, como la fricción o la resistencia del aire, la energía mecánica del sistema no se conserva. La energía mecánica disminuye debido al trabajo realizado por estas fuerzas, y parte de la energía se disipa en otras formas, como calor.'}
                  ]}
            
            ];
          })
        );
        this.temas =[
          {titulo: '1: Vectores', id: 1},
          {titulo: '2: Movimiento en dos dimensiones', id: 2},
          {titulo: '3: Las leyes del movimiento', id: 3},
          {titulo: '4: Movimiento circular y otras aplicaciones de las leyes de Newton', id: 4},
          {titulo: '5: Energía de un sistema', id: 5},
          {titulo: '6: Conservación de la energía', id: 6}
        ]
      }
      if (this.id == 6){
        

        this.cantidadTemas= 5;
        this.cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(
          map(({ }) => {
            return [
              { title: 'Tema 1: Funciones y modelos', cols: 1, rows: 1 , ideT: '1', contenid:"Las funciones son relaciones matemáticas que asignan a cada elemento de un conjunto de entrada exactamente un elemento en un conjunto de salida. Se utilizan para modelar y describir relaciones entre variables. Los modelos matemáticos, a su vez, son representaciones abstractas que capturan y simplifican el comportamiento de sistemas del mundo real mediante funciones.", 
              subtemas: [{TituloSubtema:'1.1 Representaciones de funciones',descripcionSubtema:'Las funciones pueden representarse de diversas maneras, como mediante ecuaciones algebraicas, gráficos, tablas o descripciones verbales. Cada representación ofrece información valiosa sobre el comportamiento de la función.'},
                          {TituloSubtema:'1.2 Funciones definidas por secciones',descripcionSubtema:'Las funciones definidas por secciones son aquellas que tienen diferentes definiciones en diferentes partes de su dominio. Cada sección de la función puede estar definida por una fórmula o expresión diferente.'},
                          {TituloSubtema:'1.3 Funciones crecientes y decrecientes',descripcionSubtema:'Una función es creciente en un intervalo si, a medida que la variable de entrada aumenta, el valor de la función también aumenta. Es decreciente si, a medida que la variable de entrada aumenta, el valor de la función disminuye.'},
                          {TituloSubtema:'1.4 Funciones exponenciales',descripcionSubtema:'Las funciones exponenciales son de la forma f(x)=ax, donde a es una constante positiva. Estas funciones tienen propiedades distintivas, como crecimiento exponencial o decrecimiento exponencial, y desempeñan un papel crucial en diversos campos, como la modelización del crecimiento poblacional o la decaída radiactiva.'},
                          {TituloSubtema:'1.5 Funciones inversas y logaritmos',descripcionSubtema:'La función inversa de una función f se denota como 1f−1 y tiene la propiedad de deshacer los efectos de f. Los logaritmos son funciones inversas de las funciones exponenciales y se expresan como loga(x), donde a es la base. Los logaritmos se utilizan para resolver ecuaciones exponenciales y representar relaciones de proporcionalidad.1'}
                        ]},
              { title: 'Tema 2: Limites y Derivadas', cols: 1, rows: 1 , ideT: '2', contenid:"Los conceptos de límites y derivadas son piedras angulares en el fascinante mundo del cálculo, una rama fundamental de las matemáticas que permite entender y modelar el cambio continuo. Los límites proporcionan un marco conceptual para describir el comportamiento de funciones a medida que se acercan a ciertos valores, permitiendo abordar situaciones donde las variables tienden hacia infinito o se aproximan a puntos específicos. Por otro lado, las derivadas representan las tasas de cambio instantáneo, revelando cómo una función varía en relación con su variable independiente. Estos conceptos son esenciales no solo para resolver problemas matemáticos complejos, sino también para comprender fenómenos dinámicos en campos tan diversos como la física, la economía y la ingeniería. La intersección de límites y derivadas desencadena un poderoso conjunto de herramientas matemáticas que permite explorar y entender el dinamismo presente en numerosos aspectos de nuestro entorno.", subtemas: [
                          {TituloSubtema:'2.1 Límite de una función',descripcionSubtema:'El límite de una función en un punto es el valor al cual se acerca la función a medida que la variable de entrada se aproxima a ese punto. Se denota como limx→af(x) y representa la tendencia del valor de la función a medida que la variable de entrada se acerca a a.'},
                          {TituloSubtema:'2.2 Cálculo de límites usando las leyes de los límites',descripcionSubtema:'Las leyes de los límites son reglas que permiten calcular límites de funciones mediante operaciones algebraicas y funciones conocidas. Estas leyes incluyen la suma, resta, multiplicación, división y composición de funciones.'},
                          {TituloSubtema:'2.3 La definición precisa de límite',descripcionSubtema:'El límite limx→a f(x)=L significa que para cualquier número positivo ε, existe un número positivo δ tal que si 0<∣x−a∣<δ, entonces ∣f(x)−L∣<ε.'},
                          {TituloSubtema:'2.4 Continuidad',descripcionSubtema:'Una función es continua en un punto si el límite de la función en ese punto es igual al valor de la función en ese punto. Una función es continua en un intervalo si es continua en cada punto del intervalo.'},
                          {TituloSubtema:'2.5 Límites al infinito, asíntotas horizontales',descripcionSubtema:'El límite limx→∞  f(x) se refiere al comportamiento de la función a medida que la variable de entrada se aproxima a infinito. Asíntotas horizontales son líneas horizontales a las que se acerca la función a medida que la variable de entrada se aproxima a infinito o menos infinito.'},
                          {TituloSubtema:'2.6 Derivadas y razones de cambio',descripcionSubtema:'La derivada de una función en un punto representa la tasa instantánea de cambio de la función en ese punto. Se denota como f ′ (x) o df/dx. La derivada también puede interpretarse geométricamente como la pendiente de la recta tangente a la curva en un punto.'},
                          {TituloSubtema:'2.7 La derivada como una función',descripcionSubtema:'La derivada de una función con respecto a x da como resultado una nueva función llamada la derivada de f y se denota como f ′ (x). Esta función proporciona la tasa de cambio instantánea de f en cada punto de su dominio.'}
            
                        ]},
              { title: 'Tema 3: Reglas de derivación', cols: 1, rows: 2 , ideT: '3', contenid:"Las Reglas de Derivación constituyen un componente fundamental dentro del cálculo diferencial, desempeñando un papel crucial en el análisis de las tasas de cambio y las pendientes de funciones. Estas reglas proporcionan un conjunto de herramientas sistemáticas que permiten encontrar la derivada de funciones más complejas a partir de funciones más simples. Al explorar conceptos como la regla del producto, la regla del cociente y la regla de la cadena, se logra una comprensión profunda de cómo las funciones cambian en respuesta a variaciones en sus variables independientes. Este conocimiento no solo facilita la resolución eficiente de problemas matemáticos, sino que también establece las bases para la comprensión de fenómenos dinámicos en diversas disciplinas, desde la física hasta la economía. En última instancia, las Reglas de Derivación constituyen una herramienta poderosa para desentrañar el comportamiento de las funciones en el ámbito del cálculo, revelando la esencia misma de la variación y el cambio continuo.", subtemas: [
                          {TituloSubtema:'3.1 Derivadas de funciones polinomiales y exponenciales',descripcionSubtema:'Las funciones polinomiales, como f(x)=axn+bxn−1+…+c, tienen derivadas bien definidas. Para un polinomio, la derivada de cada término se obtiene aplicando la regla de potencias, donde el exponente se reduce en uno y se multiplica por el coeficiente original. Las funciones exponenciales, f(x)=ax, tienen derivadas particulares, y la derivada de ex es ex.'},
                          {TituloSubtema:'3.2 Reglas del producto y el cociente',descripcionSubtema:'La regla del producto establece que la derivada del producto de dos funciones es igual al producto de la derivada de la primera función por la segunda, más la primera función por la derivada de la segunda. La regla del cociente establece que la derivada del cociente de dos funciones es igual al denominador por la derivada del numerador menos el numerador por la derivada del denominador, todo sobre el denominador al cuadrado.'},
                          {TituloSubtema:'3.3 Derivadas de funciones trigonométricas',descripcionSubtema:'Las funciones trigonométricas, f(x)=sin(x) o f(x)=cos(x), tienen derivadas específicas. La derivada de sin(x) es cos(x), y la derivada de cos(x) es -sin(x). Estas derivadas son fundamentales en el cálculo y se utilizan extensamente en problemas de movimiento oscilatorio y ondulatorio.'},
                          {TituloSubtema:'3.4 Regla de la cadena',descripcionSubtema:'La regla de la cadena se aplica cuando se tiene una composición de funciones. Si  y=g(f(x)), entonces la derivada de y con respecto a x se calcula multiplicando la derivada de g con respecto a u por la derivada de f con respecto a x, donde u=f(x). En notación, esto se expresa como dy/dx=dg/du⋅df/dx.'},
                          {TituloSubtema:'3.5 Derivación implícita',descripcionSubtema:'La derivación implícita se utiliza cuando una función no está expresada de manera explícita en términos de y. Se deriva cada término de la ecuación con respecto a x y se resuelve la derivada de y en términos de x y las derivadas de otras variables presentes en la ecuación.'}
            ]},
              { title: 'Tema 4: Integrales.', cols: 1, rows: 1 , ideT: '4', contenid:"Las integrales, en el contexto del cálculo matemático, constituyen una herramienta fundamental que nos permite abordar el concepto de acumulación y cambio continuo en diversas disciplinas. Al contrario de las derivadas, que se centran en la tasa de cambio instantáneo, las integrales nos brindan la capacidad de calcular áreas bajo curvas, volúmenes de sólidos tridimensionales y otras magnitudes que surgen de procesos de acumulación. Representadas por el símbolo ∫ (integral), estas operaciones nos permiten analizar fenómenos complejos desglosándolos en componentes más manejables, desempeñando un papel esencial en la resolución de problemas físicos, económicos y científicos. El teorema fundamental del cálculo establece la conexión entre derivadas e integrales, proporcionando una perspectiva unificada que potencia nuestra comprensión de los procesos de cambio y acumulación en el ámbito matemático y más allá.", subtemas: [
                          {TituloSubtema:'4.1 Áreas y distancia',descripcionSubtema:'En el contexto de integrales, el cálculo de áreas bajo una curva se realiza mediante integrales definidas. También se puede utilizar para calcular la distancia recorrida por un objeto en movimiento, ya que la integral de la velocidad proporciona la distancia total recorrida.'},
                          {TituloSubtema:'4.2 La integral definida',descripcionSubtema:'La integral definida, denotada como ∫ab            f(x) dx, representa el área bajo la curva de f(x) entre los límites de a a b. Geométricamente, esta integral representa el área entre la curva y el eje x en el intervalo dado.'},
                          {TituloSubtema:'4.3 Teorema fundamental del cálculo',descripcionSubtema:'El Teorema Fundamental del Cálculo establece la conexión entre la derivación y la integración. Establece que si F(x) es una función continua en un intervalo a,b] y f(x) es una función continua en a,b], entonces ∫abf(x)dx=F(b)−F(a), dondeF(x) es la función antiderivada de f(x).'},
                          {TituloSubtema:'4.4 Integrales indefinidas y el teorema del cambio neto',descripcionSubtema:'La integral indefinida, denotada como ∫ f(x) dx, representa la familia de funciones cuyas derivadas son f(x). El Teorema del Cambio de Variable permite simplificar la evaluación de algunas integrales mediante la sustitución de variables.'},
                          {TituloSubtema:'4.5 Regla de sustitución',descripcionSubtema:'La regla de sustitución se utiliza para simplificar la evaluación de integrales mediante el cambio de variables. Se selecciona una nueva variable de integración que simplifica la expresión y facilita el cálculo de la integral.'}
            ]},
              { title: 'Tema 5: Técnicas de integración.', cols: 1, rows: 1 , ideT: '5', contenid:"Las Técnicas de Integración constituyen un componente esencial en el extenso campo del cálculo integral, desempeñando un papel fundamental en la resolución de problemas matemáticos más complejos y diversos. Esta rama del cálculo se centra en el desarrollo de estrategias y métodos específicos para abordar integralmente funciones que pueden resultar desafiantes mediante enfoques convencionales. Desde la integración por partes hasta las sutilezas de las integrales trigonométricas y las estrategias de sustitución, estas técnicas ofrecen herramientas poderosas que permiten calcular áreas bajo curvas, hallar volúmenes, y resolver una variedad de problemas físicos y matemáticos. En esencia, las Técnicas de Integración representan una habilidad indispensable para el analista matemático, desbloqueando accesos a soluciones más sofisticadas y proporcionando una comprensión más profunda de la relación entre el cambio acumulado y las funciones que describen fenómenos en el mundo real.", subtemas: [
                          {TituloSubtema:'5.1 Integración por partes',descripcionSubtema:'La integración por partes es una técnica que se basa en la fórmula ∫ u dv = u v− ∫ v du, donde u y dv son funciones diferenciables. La elección de u y dv se hace para simplificar la integral original.'},
                          {TituloSubtema:'5.2 Integrales trigonométricas',descripcionSubtema:'Las integrales trigonométricas involucran funciones trigonométricas como seno y coseno. Se utilizan identidades trigonométricas y técnicas específicas para evaluar estas integrales, como la integración de funciones trigonométricas elevadas a potencias pares o impares.'},
                          {TituloSubtema:'5.3 Sustitución trigonométrica',descripcionSubtema:'La sustitución trigonométrica es una técnica que implica reescribir una expresión utilizando identidades trigonométricas. Esto se hace para simplificar la integral y facilitar su evaluación.'},
                          {TituloSubtema:'5.4 Estrategias para la integración',descripcionSubtema:'Estrategias generales para la integración incluyen identificar formas específicas que se pueden simplificar, descomponer en fracciones parciales, y utilizar propiedades de simetría. La elección de la estrategia depende de la forma de la integral.'},
                          {TituloSubtema:'5.5 Funciones inversas y logaritmos',descripcionSubtema:'La integración aproximada implica el uso de métodos numéricos para aproximar el valor de una integral cuando no se puede evaluar exactamente. Métodos como la regla del trapecio o la regla de Simpson se utilizan para estimar áreas bajo curvas.'},
                          {TituloSubtema:'5.6 Integrales impropias',descripcionSubtema:'Las integrales impropias son aquellas en las que al menos uno de los límites de integración es infinito o la función presenta discontinuidades en el intervalo de integración. Se manejan tomando límites y evaluando las integrales en intervalos más amplios.'}
            ]}
            ];
          })
        );
        this.temas =[
          {titulo: '1: Funciones y modelos', id: 1},
          {titulo: '2: Limites y Derivadas', id: 2},
          {titulo: '3: Reglas de derivación', id: 3},
          {titulo: '4: Integrales', id: 4},
          {titulo: '5: Técnicas de integración.', id: 5}
        ]
      }
      
    }
  
    isDropdownOpen = false;
    temas = [
      {titulo: 'Tema 1', id: 1},
      {titulo: 'Tema 2', id: 2},
      {titulo: 'Tema 3', id: 3},
      {titulo: 'Tema 4', id: 4}
      ];
  temaSeleccionado: string | null = null;

  toggleDropdown(): void {
    this.isDropdownOpen = !this.isDropdownOpen;
  }

  seleccionarTema(tema: string): void {
    this.temaSeleccionado = tema;
    this.isDropdownOpen = false;
  }
}
